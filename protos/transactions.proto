syntax = "proto3";

package ocpp;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "rpc";
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.face_all) = true;

message Transaction {
    int32 id = 1 [(gogoproto.jsontag) = "id"];
    int32 charge_point_id = 2 [(gogoproto.jsontag) = "charge_point_id"];
    int32 connector_id = 3 [(gogoproto.jsontag) = "connector_id"];
    string id_tag = 4 [(gogoproto.jsontag) = "id_tag"];
    string state = 5 [(gogoproto.jsontag) = "state"];
    bool remote_initiated = 6 [(gogoproto.jsontag) = "remote_initiated"];
    string start_timestamp = 7 [(gogoproto.jsontag) = "start_timestamp"];
    string stop_timestamp = 8 [(gogoproto.jsontag) = "stop_timestamp"];
    int32 start_meter_value = 9 [(gogoproto.jsontag) = "start_meter_value"];
    int32 stop_meter_value = 10 [(gogoproto.jsontag) = "stop_meter_value"];
    string stop_reason = 11 [(gogoproto.jsontag) = "stop_reason"];
}


// for exposed services
message GetTransactionByIdReq {
    int32 id = 1;
}

message GetTransactionByIdResp {
    Transaction transaction = 1 [(gogoproto.jsontag) = "transaction"];
}

message GetOngoingTransactionReq {
    string application_id = 1;
    string charge_point_identifier = 2;
    int32 connector_id = 3;
}

message GetOngoingTransactionResp {
    bool ongoing_transaction = 1 [(gogoproto.jsontag) = "ongoing_transaction"];
    Transaction transaction = 2 [(gogoproto.jsontag) = "transaction"];
}

message GetOngoingTransactionsReq {
    string application_id = 1;
    int32 charge_point_identifier = 2;
}

message GetOngoingTransactionsResp {
    repeated Transaction transactions = 1 [(gogoproto.jsontag) = "transaction"];
}


// for internal services
message CreateTransactionReq {
    int32 charge_point_id = 1;
    int32 connector_id = 2;
    bool remote_initiated = 3;
    string id_tag = 4;
}

message CreateTransactionResp {
    Transaction transaction = 1 [(gogoproto.jsontag) = "transaction"];
}

message StartTransactionReq {
    int32 id = 1;
    int32 start_meter_value = 2;
}

message StartTransactionResp {
}

message AbortTransactionReq {
    int32 id = 1;
}

message AbortTransactionResp {
}

message AbnormalStopTransactionReq {
    int32 id = 1;
}

message AbnormalStopTransactionResp {
}


message StopTransactionReq {
    int32 id = 1;
    int32 stop_meter_value = 2;
    string stop_reason = 3;
}

message StopTransactionResp {
    Transaction transaction = 1 [(gogoproto.jsontag) = "transaction"];
}