syntax = "proto3";

package ocpp;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "rpc";
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.face_all) = true;

service StatusNotificationService {
    rpc GetLatestStatusNotifications (GetLatestStatusNotificationsReq) returns (GetLatestStatusNotificationsResp) {};
    rpc CreateStatusNotification (CreateStatusNotificationReq) returns (CreateStatusNotificationReq) {};
}

message StatusNotification {
    int32 id = 1 [(gogoproto.jsontag) = "id"];
    int32 connector_id = 2 [(gogoproto.jsontag) = "connector_id"];
    string error_code = 3 [(gogoproto.jsontag) = "error_code"];
    string info = 4 [(gogoproto.jsontag) = "info"];
    string status = 5 [(gogoproto.jsontag) = "status"];
    string vendor_id = 6 [(gogoproto.jsontag) = "vendor_id"];
    string vendor_error_code = 7 [(gogoproto.jsontag) = "vendor_error_code"];
    string timestamp = 8 [(gogoproto.jsontag) = "timestamp"];
    string reported_timestamp = 9 [(gogoproto.jsontag) = "reported_timestamp"];
}

message GetLatestStatusNotificationsReq {
    string entity_code = 1;
    string charge_point_identifier = 2;
}

message GetLatestStatusNotificationsResp {
    repeated StatusNotification connector_status = 1 [(gogoproto.jsontag) = "connector_status"];  
}

message CreateStatusNotificationReq {
    string entity_code = 1;
    string charge_point_identifier = 2;
    int32 connector_id = 3;
    string error_code = 4;
    string info = 5;
    string status = 6;
    string timestamp = 7;
    string vendor_id = 8;
    string vendor_error_code = 9;
}

message CreateStatusNotificationResp {
    StatusNotification status_notification = 1 [(gogoproto.jsontag) = "status_notification"];
}
