// Code generated by schema-generate. DO NOT EDIT.

package ocpp16

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// ConfigurationKeyItems 
type ConfigurationKeyItems struct {
  Key string `json:"key"`
  Readonly bool `json:"readonly"`
  Value string `json:"value,omitempty"`
}

// GetConfigurationResponse 
type GetConfigurationResponse struct {
  ConfigurationKey []*ConfigurationKeyItems `json:"configurationKey,omitempty"`
  UnknownKey []string `json:"unknownKey,omitempty"`
}

func (strct *ConfigurationKeyItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Readonly" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "readonly" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"readonly\": ")
	if tmp, err := json.Marshal(strct.Readonly); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ConfigurationKeyItems) UnmarshalJSON(b []byte) error {
    keyReceived := false
    readonlyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            keyReceived = true
        case "readonly":
            if err := json.Unmarshal([]byte(v), &strct.Readonly); err != nil {
                return err
             }
            readonlyReceived = true
        case "value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if key (a required property) was received
    if !keyReceived {
        return errors.New("\"key\" is required but was not present")
    }
    // check if readonly (a required property) was received
    if !readonlyReceived {
        return errors.New("\"readonly\" is required but was not present")
    }
    return nil
}

func (strct *GetConfigurationResponse) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "configurationKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"configurationKey\": ")
	if tmp, err := json.Marshal(strct.ConfigurationKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "unknownKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"unknownKey\": ")
	if tmp, err := json.Marshal(strct.UnknownKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *GetConfigurationResponse) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "configurationKey":
            if err := json.Unmarshal([]byte(v), &strct.ConfigurationKey); err != nil {
                return err
             }
        case "unknownKey":
            if err := json.Unmarshal([]byte(v), &strct.UnknownKey); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
