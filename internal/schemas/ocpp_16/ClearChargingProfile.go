// Code generated by schema-generate. DO NOT EDIT.

package ocpp16

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// ClearChargingProfileRequest 
type ClearChargingProfileRequest struct {
  ChargingProfilePurpose string `json:"chargingProfilePurpose,omitempty"`
  ConnectorId int `json:"connectorId,omitempty"`
  Id int `json:"id,omitempty"`
  StackLevel int `json:"stackLevel,omitempty"`
}

func (strct *ClearChargingProfileRequest) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "chargingProfilePurpose" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"chargingProfilePurpose\": ")
	if tmp, err := json.Marshal(strct.ChargingProfilePurpose); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "connectorId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"connectorId\": ")
	if tmp, err := json.Marshal(strct.ConnectorId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "stackLevel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"stackLevel\": ")
	if tmp, err := json.Marshal(strct.StackLevel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ClearChargingProfileRequest) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "chargingProfilePurpose":
            if err := json.Unmarshal([]byte(v), &strct.ChargingProfilePurpose); err != nil {
                return err
             }
        case "connectorId":
            if err := json.Unmarshal([]byte(v), &strct.ConnectorId); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "stackLevel":
            if err := json.Unmarshal([]byte(v), &strct.StackLevel); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
