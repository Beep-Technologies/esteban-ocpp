// Code generated by schema-generate. DO NOT EDIT.

package ocpp16

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// StartTransactionRequest 
type StartTransactionRequest struct {
  ConnectorId int `json:"connectorId"`
  IdTag string `json:"idTag"`
  MeterStart int `json:"meterStart"`
  ReservationId int `json:"reservationId,omitempty"`
  Timestamp string `json:"timestamp"`
}

func (strct *StartTransactionRequest) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ConnectorId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "connectorId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"connectorId\": ")
	if tmp, err := json.Marshal(strct.ConnectorId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "IdTag" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "idTag" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"idTag\": ")
	if tmp, err := json.Marshal(strct.IdTag); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MeterStart" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "meterStart" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meterStart\": ")
	if tmp, err := json.Marshal(strct.MeterStart); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reservationId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reservationId\": ")
	if tmp, err := json.Marshal(strct.ReservationId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Timestamp" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "timestamp" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timestamp\": ")
	if tmp, err := json.Marshal(strct.Timestamp); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *StartTransactionRequest) UnmarshalJSON(b []byte) error {
    connectorIdReceived := false
    idTagReceived := false
    meterStartReceived := false
    timestampReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "connectorId":
            if err := json.Unmarshal([]byte(v), &strct.ConnectorId); err != nil {
                return err
             }
            connectorIdReceived = true
        case "idTag":
            if err := json.Unmarshal([]byte(v), &strct.IdTag); err != nil {
                return err
             }
            idTagReceived = true
        case "meterStart":
            if err := json.Unmarshal([]byte(v), &strct.MeterStart); err != nil {
                return err
             }
            meterStartReceived = true
        case "reservationId":
            if err := json.Unmarshal([]byte(v), &strct.ReservationId); err != nil {
                return err
             }
        case "timestamp":
            if err := json.Unmarshal([]byte(v), &strct.Timestamp); err != nil {
                return err
             }
            timestampReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if connectorId (a required property) was received
    if !connectorIdReceived {
        return errors.New("\"connectorId\" is required but was not present")
    }
    // check if idTag (a required property) was received
    if !idTagReceived {
        return errors.New("\"idTag\" is required but was not present")
    }
    // check if meterStart (a required property) was received
    if !meterStartReceived {
        return errors.New("\"meterStart\" is required but was not present")
    }
    // check if timestamp (a required property) was received
    if !timestampReceived {
        return errors.New("\"timestamp\" is required but was not present")
    }
    return nil
}
