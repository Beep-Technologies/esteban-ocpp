// Code generated by schema-generate. DO NOT EDIT.

package ocpp16

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// MeterValueItems 
type MeterValueItems struct {
  SampledValue []*SampledValueItems `json:"sampledValue"`
  Timestamp string `json:"timestamp"`
}

// MeterValuesRequest 
type MeterValuesRequest struct {
  ConnectorId int `json:"connectorId"`
  MeterValue []*MeterValueItems `json:"meterValue"`
  TransactionId int `json:"transactionId,omitempty"`
}

// SampledValueItems 
type SampledValueItems struct {
  Context string `json:"context,omitempty"`
  Format string `json:"format,omitempty"`
  Location string `json:"location,omitempty"`
  Measurand string `json:"measurand,omitempty"`
  Phase string `json:"phase,omitempty"`
  Unit string `json:"unit,omitempty"`
  Value string `json:"value"`
}

func (strct *MeterValueItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "SampledValue" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "sampledValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"sampledValue\": ")
	if tmp, err := json.Marshal(strct.SampledValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Timestamp" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "timestamp" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timestamp\": ")
	if tmp, err := json.Marshal(strct.Timestamp); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MeterValueItems) UnmarshalJSON(b []byte) error {
    sampledValueReceived := false
    timestampReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "sampledValue":
            if err := json.Unmarshal([]byte(v), &strct.SampledValue); err != nil {
                return err
             }
            sampledValueReceived = true
        case "timestamp":
            if err := json.Unmarshal([]byte(v), &strct.Timestamp); err != nil {
                return err
             }
            timestampReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if sampledValue (a required property) was received
    if !sampledValueReceived {
        return errors.New("\"sampledValue\" is required but was not present")
    }
    // check if timestamp (a required property) was received
    if !timestampReceived {
        return errors.New("\"timestamp\" is required but was not present")
    }
    return nil
}

func (strct *MeterValuesRequest) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "ConnectorId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "connectorId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"connectorId\": ")
	if tmp, err := json.Marshal(strct.ConnectorId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "MeterValue" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "meterValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meterValue\": ")
	if tmp, err := json.Marshal(strct.MeterValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "transactionId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"transactionId\": ")
	if tmp, err := json.Marshal(strct.TransactionId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MeterValuesRequest) UnmarshalJSON(b []byte) error {
    connectorIdReceived := false
    meterValueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "connectorId":
            if err := json.Unmarshal([]byte(v), &strct.ConnectorId); err != nil {
                return err
             }
            connectorIdReceived = true
        case "meterValue":
            if err := json.Unmarshal([]byte(v), &strct.MeterValue); err != nil {
                return err
             }
            meterValueReceived = true
        case "transactionId":
            if err := json.Unmarshal([]byte(v), &strct.TransactionId); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if connectorId (a required property) was received
    if !connectorIdReceived {
        return errors.New("\"connectorId\" is required but was not present")
    }
    // check if meterValue (a required property) was received
    if !meterValueReceived {
        return errors.New("\"meterValue\" is required but was not present")
    }
    return nil
}

func (strct *SampledValueItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "context" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"context\": ")
	if tmp, err := json.Marshal(strct.Context); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "format" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"format\": ")
	if tmp, err := json.Marshal(strct.Format); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "location" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"location\": ")
	if tmp, err := json.Marshal(strct.Location); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "measurand" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"measurand\": ")
	if tmp, err := json.Marshal(strct.Measurand); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "phase" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"phase\": ")
	if tmp, err := json.Marshal(strct.Phase); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "unit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"unit\": ")
	if tmp, err := json.Marshal(strct.Unit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Value" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SampledValueItems) UnmarshalJSON(b []byte) error {
    valueReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "context":
            if err := json.Unmarshal([]byte(v), &strct.Context); err != nil {
                return err
             }
        case "format":
            if err := json.Unmarshal([]byte(v), &strct.Format); err != nil {
                return err
             }
        case "location":
            if err := json.Unmarshal([]byte(v), &strct.Location); err != nil {
                return err
             }
        case "measurand":
            if err := json.Unmarshal([]byte(v), &strct.Measurand); err != nil {
                return err
             }
        case "phase":
            if err := json.Unmarshal([]byte(v), &strct.Phase); err != nil {
                return err
             }
        case "unit":
            if err := json.Unmarshal([]byte(v), &strct.Unit); err != nil {
                return err
             }
        case "value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
            valueReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if value (a required property) was received
    if !valueReceived {
        return errors.New("\"value\" is required but was not present")
    }
    return nil
}
