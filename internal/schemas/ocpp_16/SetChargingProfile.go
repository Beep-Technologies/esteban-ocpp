// Code generated by schema-generate. DO NOT EDIT.

package ocpp16

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// CsChargingProfiles
type CsChargingProfiles struct {
	ChargingProfileId      int               `json:"chargingProfileId"`
	ChargingProfileKind    string            `json:"chargingProfileKind"`
	ChargingProfilePurpose string            `json:"chargingProfilePurpose"`
	ChargingSchedule       *ChargingSchedule `json:"chargingSchedule"`
	RecurrencyKind         string            `json:"recurrencyKind,omitempty"`
	StackLevel             int               `json:"stackLevel"`
	TransactionId          int               `json:"transactionId,omitempty"`
	ValidFrom              string            `json:"validFrom,omitempty"`
	ValidTo                string            `json:"validTo,omitempty"`
}

// SetChargingProfileRequest
type SetChargingProfileRequest struct {
	ConnectorId        int                 `json:"connectorId"`
	CsChargingProfiles *CsChargingProfiles `json:"csChargingProfiles"`
}

func (strct *CsChargingProfiles) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "ChargingProfileId" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "chargingProfileId" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"chargingProfileId\": ")
	if tmp, err := json.Marshal(strct.ChargingProfileId); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "ChargingProfileKind" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "chargingProfileKind" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"chargingProfileKind\": ")
	if tmp, err := json.Marshal(strct.ChargingProfileKind); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "ChargingProfilePurpose" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "chargingProfilePurpose" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"chargingProfilePurpose\": ")
	if tmp, err := json.Marshal(strct.ChargingProfilePurpose); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "ChargingSchedule" field is required
	if strct.ChargingSchedule == nil {
		return nil, errors.New("chargingSchedule is a required field")
	}
	// Marshal the "chargingSchedule" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"chargingSchedule\": ")
	if tmp, err := json.Marshal(strct.ChargingSchedule); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "recurrencyKind" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"recurrencyKind\": ")
	if tmp, err := json.Marshal(strct.RecurrencyKind); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "StackLevel" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "stackLevel" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"stackLevel\": ")
	if tmp, err := json.Marshal(strct.StackLevel); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "transactionId" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"transactionId\": ")
	if tmp, err := json.Marshal(strct.TransactionId); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "validFrom" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"validFrom\": ")
	if tmp, err := json.Marshal(strct.ValidFrom); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// Marshal the "validTo" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"validTo\": ")
	if tmp, err := json.Marshal(strct.ValidTo); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CsChargingProfiles) UnmarshalJSON(b []byte) error {
	chargingProfileIdReceived := false
	chargingProfileKindReceived := false
	chargingProfilePurposeReceived := false
	chargingScheduleReceived := false
	stackLevelReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "chargingProfileId":
			if err := json.Unmarshal([]byte(v), &strct.ChargingProfileId); err != nil {
				return err
			}
			chargingProfileIdReceived = true
		case "chargingProfileKind":
			if err := json.Unmarshal([]byte(v), &strct.ChargingProfileKind); err != nil {
				return err
			}
			chargingProfileKindReceived = true
		case "chargingProfilePurpose":
			if err := json.Unmarshal([]byte(v), &strct.ChargingProfilePurpose); err != nil {
				return err
			}
			chargingProfilePurposeReceived = true
		case "chargingSchedule":
			if err := json.Unmarshal([]byte(v), &strct.ChargingSchedule); err != nil {
				return err
			}
			chargingScheduleReceived = true
		case "recurrencyKind":
			if err := json.Unmarshal([]byte(v), &strct.RecurrencyKind); err != nil {
				return err
			}
		case "stackLevel":
			if err := json.Unmarshal([]byte(v), &strct.StackLevel); err != nil {
				return err
			}
			stackLevelReceived = true
		case "transactionId":
			if err := json.Unmarshal([]byte(v), &strct.TransactionId); err != nil {
				return err
			}
		case "validFrom":
			if err := json.Unmarshal([]byte(v), &strct.ValidFrom); err != nil {
				return err
			}
		case "validTo":
			if err := json.Unmarshal([]byte(v), &strct.ValidTo); err != nil {
				return err
			}
		default:
			return fmt.Errorf("additional property not allowed: \"" + k + "\"")
		}
	}
	// check if chargingProfileId (a required property) was received
	if !chargingProfileIdReceived {
		return errors.New("\"chargingProfileId\" is required but was not present")
	}
	// check if chargingProfileKind (a required property) was received
	if !chargingProfileKindReceived {
		return errors.New("\"chargingProfileKind\" is required but was not present")
	}
	// check if chargingProfilePurpose (a required property) was received
	if !chargingProfilePurposeReceived {
		return errors.New("\"chargingProfilePurpose\" is required but was not present")
	}
	// check if chargingSchedule (a required property) was received
	if !chargingScheduleReceived {
		return errors.New("\"chargingSchedule\" is required but was not present")
	}
	// check if stackLevel (a required property) was received
	if !stackLevelReceived {
		return errors.New("\"stackLevel\" is required but was not present")
	}
	return nil
}

func (strct *SetChargingProfileRequest) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
	comma := false
	// "ConnectorId" field is required
	// only required object types supported for marshal checking (for now)
	// Marshal the "connectorId" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"connectorId\": ")
	if tmp, err := json.Marshal(strct.ConnectorId); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true
	// "CsChargingProfiles" field is required
	if strct.CsChargingProfiles == nil {
		return nil, errors.New("csChargingProfiles is a required field")
	}
	// Marshal the "csChargingProfiles" field
	if comma {
		buf.WriteString(",")
	}
	buf.WriteString("\"csChargingProfiles\": ")
	if tmp, err := json.Marshal(strct.CsChargingProfiles); err != nil {
		return nil, err
	} else {
		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SetChargingProfileRequest) UnmarshalJSON(b []byte) error {
	connectorIdReceived := false
	csChargingProfilesReceived := false
	var jsonMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &jsonMap); err != nil {
		return err
	}
	// parse all the defined properties
	for k, v := range jsonMap {
		switch k {
		case "connectorId":
			if err := json.Unmarshal([]byte(v), &strct.ConnectorId); err != nil {
				return err
			}
			connectorIdReceived = true
		case "csChargingProfiles":
			if err := json.Unmarshal([]byte(v), &strct.CsChargingProfiles); err != nil {
				return err
			}
			csChargingProfilesReceived = true
		default:
			return fmt.Errorf("additional property not allowed: \"" + k + "\"")
		}
	}
	// check if connectorId (a required property) was received
	if !connectorIdReceived {
		return errors.New("\"connectorId\" is required but was not present")
	}
	// check if csChargingProfiles (a required property) was received
	if !csChargingProfilesReceived {
		return errors.New("\"csChargingProfiles\" is required but was not present")
	}
	return nil
}
