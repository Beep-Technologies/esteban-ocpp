// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: charge_points.proto

package rpc

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetChargePointByIDReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChargePointByIDReq) Reset()         { *m = GetChargePointByIDReq{} }
func (m *GetChargePointByIDReq) String() string { return proto.CompactTextString(m) }
func (*GetChargePointByIDReq) ProtoMessage()    {}
func (*GetChargePointByIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{0}
}
func (m *GetChargePointByIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointByIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointByIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointByIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointByIDReq.Merge(m, src)
}
func (m *GetChargePointByIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointByIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointByIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointByIDReq proto.InternalMessageInfo

type GetChargePointByIDResp struct {
	Id                      int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChargePointVendor       string   `protobuf:"bytes,2,opt,name=charge_point_vendor,json=chargePointVendor,proto3" json:"charge_point_vendor,omitempty"`
	ChargePointModel        string   `protobuf:"bytes,3,opt,name=charge_point_model,json=chargePointModel,proto3" json:"charge_point_model,omitempty"`
	ChargePointSerialNumber string   `protobuf:"bytes,4,opt,name=charge_point_serial_number,json=chargePointSerialNumber,proto3" json:"charge_point_serial_number,omitempty"`
	ChargeBoxSerialNumber   string   `protobuf:"bytes,5,opt,name=charge_box_serial_number,json=chargeBoxSerialNumber,proto3" json:"charge_box_serial_number,omitempty"`
	Iccid                   string   `protobuf:"bytes,6,opt,name=iccid,proto3" json:"iccid,omitempty"`
	Imsi                    string   `protobuf:"bytes,7,opt,name=imsi,proto3" json:"imsi,omitempty"`
	MeterType               string   `protobuf:"bytes,8,opt,name=meter_type,json=meterType,proto3" json:"meter_type,omitempty"`
	MeterSerialNumber       string   `protobuf:"bytes,9,opt,name=meter_serial_number,json=meterSerialNumber,proto3" json:"meter_serial_number,omitempty"`
	FirmwareVersion         string   `protobuf:"bytes,10,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	OcppProtocol            string   `protobuf:"bytes,11,opt,name=ocpp_protocol,json=ocppProtocol,proto3" json:"ocpp_protocol,omitempty"`
	ChargePointIdentifier   string   `protobuf:"bytes,12,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier,omitempty"`
	Description             string   `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	LocationLatitude        float64  `protobuf:"fixed64,14,opt,name=location_latitude,json=locationLatitude,proto3" json:"location_latitude,omitempty"`
	LocationLongitude       float64  `protobuf:"fixed64,15,opt,name=location_longitude,json=locationLongitude,proto3" json:"location_longitude,omitempty"`
	AddressId               int32    `protobuf:"varint,16,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *GetChargePointByIDResp) Reset()         { *m = GetChargePointByIDResp{} }
func (m *GetChargePointByIDResp) String() string { return proto.CompactTextString(m) }
func (*GetChargePointByIDResp) ProtoMessage()    {}
func (*GetChargePointByIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{1}
}
func (m *GetChargePointByIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointByIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointByIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointByIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointByIDResp.Merge(m, src)
}
func (m *GetChargePointByIDResp) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointByIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointByIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointByIDResp proto.InternalMessageInfo

type GetChargePointByIdentifierReq struct {
	ChargePointIdentifier string   `protobuf:"bytes,1,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetChargePointByIdentifierReq) Reset()         { *m = GetChargePointByIdentifierReq{} }
func (m *GetChargePointByIdentifierReq) String() string { return proto.CompactTextString(m) }
func (*GetChargePointByIdentifierReq) ProtoMessage()    {}
func (*GetChargePointByIdentifierReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{2}
}
func (m *GetChargePointByIdentifierReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointByIdentifierReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointByIdentifierReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointByIdentifierReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointByIdentifierReq.Merge(m, src)
}
func (m *GetChargePointByIdentifierReq) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointByIdentifierReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointByIdentifierReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointByIdentifierReq proto.InternalMessageInfo

type GetChargePointByIdentifierResp struct {
	Id                      int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChargePointVendor       string   `protobuf:"bytes,2,opt,name=charge_point_vendor,json=chargePointVendor,proto3" json:"charge_point_vendor,omitempty"`
	ChargePointModel        string   `protobuf:"bytes,3,opt,name=charge_point_model,json=chargePointModel,proto3" json:"charge_point_model,omitempty"`
	ChargePointSerialNumber string   `protobuf:"bytes,4,opt,name=charge_point_serial_number,json=chargePointSerialNumber,proto3" json:"charge_point_serial_number,omitempty"`
	ChargeBoxSerialNumber   string   `protobuf:"bytes,5,opt,name=charge_box_serial_number,json=chargeBoxSerialNumber,proto3" json:"charge_box_serial_number,omitempty"`
	Iccid                   string   `protobuf:"bytes,6,opt,name=iccid,proto3" json:"iccid,omitempty"`
	Imsi                    string   `protobuf:"bytes,7,opt,name=imsi,proto3" json:"imsi,omitempty"`
	MeterType               string   `protobuf:"bytes,8,opt,name=meter_type,json=meterType,proto3" json:"meter_type,omitempty"`
	MeterSerialNumber       string   `protobuf:"bytes,9,opt,name=meter_serial_number,json=meterSerialNumber,proto3" json:"meter_serial_number,omitempty"`
	FirmwareVersion         string   `protobuf:"bytes,10,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	OcppProtocol            string   `protobuf:"bytes,11,opt,name=ocpp_protocol,json=ocppProtocol,proto3" json:"ocpp_protocol,omitempty"`
	ChargePointIdentifier   string   `protobuf:"bytes,12,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier,omitempty"`
	Description             string   `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	LocationLatitude        float64  `protobuf:"fixed64,14,opt,name=location_latitude,json=locationLatitude,proto3" json:"location_latitude,omitempty"`
	LocationLongitude       float64  `protobuf:"fixed64,15,opt,name=location_longitude,json=locationLongitude,proto3" json:"location_longitude,omitempty"`
	AddressId               int32    `protobuf:"varint,16,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *GetChargePointByIdentifierResp) Reset()         { *m = GetChargePointByIdentifierResp{} }
func (m *GetChargePointByIdentifierResp) String() string { return proto.CompactTextString(m) }
func (*GetChargePointByIdentifierResp) ProtoMessage()    {}
func (*GetChargePointByIdentifierResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{3}
}
func (m *GetChargePointByIdentifierResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointByIdentifierResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointByIdentifierResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointByIdentifierResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointByIdentifierResp.Merge(m, src)
}
func (m *GetChargePointByIdentifierResp) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointByIdentifierResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointByIdentifierResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointByIdentifierResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetChargePointByIDReq)(nil), "ocpp.GetChargePointByIDReq")
	proto.RegisterType((*GetChargePointByIDResp)(nil), "ocpp.GetChargePointByIDResp")
	proto.RegisterType((*GetChargePointByIdentifierReq)(nil), "ocpp.GetChargePointByIdentifierReq")
	proto.RegisterType((*GetChargePointByIdentifierResp)(nil), "ocpp.GetChargePointByIdentifierResp")
}

func init() { proto.RegisterFile("charge_points.proto", fileDescriptor_8f92b1fd075ed707) }

var fileDescriptor_8f92b1fd075ed707 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x52, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x5d, 0x33, 0xe8, 0xbb, 0xaf, 0xce, 0x30, 0x66, 0x26, 0x2d, 0xaa, 0xca, 0x81, 0x22,
	0x58, 0x77, 0x40, 0x82, 0x03, 0xb7, 0x82, 0x84, 0x2a, 0x0d, 0x34, 0x15, 0x34, 0x24, 0x2e, 0x51,
	0x62, 0xbb, 0x99, 0xa5, 0x24, 0x0e, 0x8e, 0x3b, 0xd6, 0xbf, 0xc2, 0x91, 0x5f, 0xb3, 0x23, 0x3f,
	0x81, 0xf5, 0xc4, 0xcf, 0x40, 0x7e, 0xd3, 0x76, 0xcd, 0x40, 0xbd, 0x72, 0xe9, 0xcd, 0x7e, 0x3e,
	0xde, 0xbc, 0x7e, 0xf2, 0xc0, 0x7d, 0x7e, 0x1e, 0x9a, 0x58, 0x06, 0xb9, 0x56, 0x99, 0x2d, 0xba,
	0xb9, 0xd1, 0x56, 0xd3, 0xba, 0xe6, 0x79, 0x7e, 0x70, 0x14, 0x2b, 0x7b, 0x3e, 0x8a, 0xba, 0x5c,
	0xa7, 0xc7, 0xb1, 0x8e, 0xf5, 0x31, 0x92, 0xd1, 0x68, 0x88, 0x37, 0xbc, 0xe0, 0xa9, 0x34, 0xb5,
	0x9f, 0xc0, 0xde, 0x3b, 0x69, 0xdf, 0xe0, 0xb8, 0x53, 0x37, 0xad, 0x37, 0xee, 0xbf, 0x1d, 0xc8,
	0xaf, 0x74, 0x1b, 0x6a, 0x4a, 0x30, 0xd2, 0x22, 0x1d, 0x6f, 0x50, 0x53, 0xa2, 0xfd, 0xdd, 0x83,
	0x87, 0xff, 0x52, 0x16, 0xf9, 0x6d, 0x29, 0xed, 0x56, 0xf7, 0x0b, 0x2e, 0x64, 0x26, 0xb4, 0x61,
	0xb5, 0x16, 0xe9, 0x34, 0x06, 0xbb, 0xfc, 0x66, 0xc2, 0x19, 0x12, 0xf4, 0x39, 0xd0, 0x8a, 0x3e,
	0xd5, 0x42, 0x26, 0x6c, 0x0d, 0xe5, 0xcd, 0x05, 0xf9, 0x7b, 0x87, 0xd3, 0xd7, 0x70, 0x50, 0x51,
	0x17, 0xd2, 0xa8, 0x30, 0x09, 0xb2, 0x51, 0x1a, 0x49, 0xc3, 0xea, 0xe8, 0xda, 0x5f, 0x70, 0x7d,
	0x44, 0xfe, 0x03, 0xd2, 0xf4, 0x15, 0xb0, 0xa9, 0x39, 0xd2, 0x97, 0xb7, 0xac, 0x1e, 0x5a, 0xf7,
	0x4a, 0xbe, 0xa7, 0x2f, 0x2b, 0xc6, 0x07, 0xe0, 0x29, 0xce, 0x95, 0x60, 0xeb, 0xa8, 0x2a, 0x2f,
	0x94, 0x42, 0x5d, 0xa5, 0x85, 0x62, 0x77, 0x11, 0xc4, 0x33, 0x3d, 0x04, 0x48, 0xa5, 0x95, 0x26,
	0xb0, 0xe3, 0x5c, 0xb2, 0x7b, 0xc8, 0x34, 0x10, 0xf9, 0x34, 0xce, 0xa5, 0x0b, 0xa7, 0xa4, 0xab,
	0x1f, 0x6f, 0x94, 0xe1, 0x20, 0x55, 0xf9, 0xf0, 0x53, 0x68, 0x0e, 0x95, 0x49, 0xbf, 0x85, 0x46,
	0x06, 0x17, 0xd2, 0x14, 0x4a, 0x67, 0x0c, 0x50, 0xbc, 0x33, 0xc3, 0xcf, 0x4a, 0x98, 0x3e, 0x86,
	0x2d, 0x57, 0x81, 0x00, 0xff, 0x2c, 0xd7, 0x09, 0xdb, 0x40, 0xdd, 0xa6, 0x03, 0x4f, 0xa7, 0x18,
	0x7d, 0x09, 0xfb, 0x95, 0xf8, 0x94, 0x90, 0x99, 0x55, 0x43, 0x25, 0x0d, 0xdb, 0x5c, 0x0c, 0x00,
	0xb3, 0xeb, 0xcf, 0x49, 0xda, 0x82, 0x0d, 0x21, 0x0b, 0x6e, 0x54, 0x6e, 0xdd, 0x0a, 0x5b, 0xa8,
	0x5d, 0x84, 0xe8, 0x33, 0xd8, 0x4d, 0x34, 0x0f, 0xdd, 0x39, 0x48, 0x42, 0xab, 0xec, 0x48, 0x48,
	0xb6, 0xdd, 0x22, 0x1d, 0x32, 0x68, 0xce, 0x88, 0x93, 0x29, 0x4e, 0x8f, 0x80, 0xde, 0x88, 0x75,
	0x16, 0x97, 0xea, 0x1d, 0x54, 0xcf, 0xc7, 0x9c, 0xcc, 0x08, 0x17, 0x6a, 0x28, 0x84, 0x91, 0x45,
	0x11, 0x28, 0xc1, 0x9a, 0x58, 0xb5, 0xc6, 0x14, 0xe9, 0x8b, 0xf6, 0x67, 0x38, 0xfc, 0xab, 0x9b,
	0xf3, 0xd5, 0x5d, 0x9b, 0x97, 0xbc, 0x9a, 0x2c, 0x79, 0x75, 0xfb, 0x87, 0x07, 0xfe, 0xb2, 0xc9,
	0xab, 0xf6, 0xaf, 0xda, 0xff, 0xbf, 0xdb, 0xdf, 0x7b, 0x74, 0x75, 0xed, 0xdf, 0xf9, 0x7d, 0xed,
	0x93, 0xab, 0x89, 0x4f, 0x7e, 0x4e, 0x7c, 0xf2, 0x6b, 0xe2, 0x93, 0x2f, 0x6b, 0x26, 0xe7, 0xd1,
	0x3a, 0xa6, 0xf1, 0xe2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xd5, 0x9c, 0xa9, 0x31, 0x06,
	0x00, 0x00,
}

type GetChargePointByIDReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetId() int32
}

func (this *GetChargePointByIDReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointByIDReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointByIDReqFromFace(this)
}

func (this *GetChargePointByIDReq) GetId() int32 {
	return this.Id
}

func NewGetChargePointByIDReqFromFace(that GetChargePointByIDReqFace) *GetChargePointByIDReq {
	this := &GetChargePointByIDReq{}
	this.Id = that.GetId()
	return this
}

type GetChargePointByIDRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetId() int32
	GetChargePointVendor() string
	GetChargePointModel() string
	GetChargePointSerialNumber() string
	GetChargeBoxSerialNumber() string
	GetIccid() string
	GetImsi() string
	GetMeterType() string
	GetMeterSerialNumber() string
	GetFirmwareVersion() string
	GetOcppProtocol() string
	GetChargePointIdentifier() string
	GetDescription() string
	GetLocationLatitude() float64
	GetLocationLongitude() float64
	GetAddressId() int32
}

func (this *GetChargePointByIDResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointByIDResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointByIDRespFromFace(this)
}

func (this *GetChargePointByIDResp) GetId() int32 {
	return this.Id
}

func (this *GetChargePointByIDResp) GetChargePointVendor() string {
	return this.ChargePointVendor
}

func (this *GetChargePointByIDResp) GetChargePointModel() string {
	return this.ChargePointModel
}

func (this *GetChargePointByIDResp) GetChargePointSerialNumber() string {
	return this.ChargePointSerialNumber
}

func (this *GetChargePointByIDResp) GetChargeBoxSerialNumber() string {
	return this.ChargeBoxSerialNumber
}

func (this *GetChargePointByIDResp) GetIccid() string {
	return this.Iccid
}

func (this *GetChargePointByIDResp) GetImsi() string {
	return this.Imsi
}

func (this *GetChargePointByIDResp) GetMeterType() string {
	return this.MeterType
}

func (this *GetChargePointByIDResp) GetMeterSerialNumber() string {
	return this.MeterSerialNumber
}

func (this *GetChargePointByIDResp) GetFirmwareVersion() string {
	return this.FirmwareVersion
}

func (this *GetChargePointByIDResp) GetOcppProtocol() string {
	return this.OcppProtocol
}

func (this *GetChargePointByIDResp) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func (this *GetChargePointByIDResp) GetDescription() string {
	return this.Description
}

func (this *GetChargePointByIDResp) GetLocationLatitude() float64 {
	return this.LocationLatitude
}

func (this *GetChargePointByIDResp) GetLocationLongitude() float64 {
	return this.LocationLongitude
}

func (this *GetChargePointByIDResp) GetAddressId() int32 {
	return this.AddressId
}

func NewGetChargePointByIDRespFromFace(that GetChargePointByIDRespFace) *GetChargePointByIDResp {
	this := &GetChargePointByIDResp{}
	this.Id = that.GetId()
	this.ChargePointVendor = that.GetChargePointVendor()
	this.ChargePointModel = that.GetChargePointModel()
	this.ChargePointSerialNumber = that.GetChargePointSerialNumber()
	this.ChargeBoxSerialNumber = that.GetChargeBoxSerialNumber()
	this.Iccid = that.GetIccid()
	this.Imsi = that.GetImsi()
	this.MeterType = that.GetMeterType()
	this.MeterSerialNumber = that.GetMeterSerialNumber()
	this.FirmwareVersion = that.GetFirmwareVersion()
	this.OcppProtocol = that.GetOcppProtocol()
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	this.Description = that.GetDescription()
	this.LocationLatitude = that.GetLocationLatitude()
	this.LocationLongitude = that.GetLocationLongitude()
	this.AddressId = that.GetAddressId()
	return this
}

type GetChargePointByIdentifierReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePointIdentifier() string
}

func (this *GetChargePointByIdentifierReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointByIdentifierReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointByIdentifierReqFromFace(this)
}

func (this *GetChargePointByIdentifierReq) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func NewGetChargePointByIdentifierReqFromFace(that GetChargePointByIdentifierReqFace) *GetChargePointByIdentifierReq {
	this := &GetChargePointByIdentifierReq{}
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	return this
}

type GetChargePointByIdentifierRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetId() int32
	GetChargePointVendor() string
	GetChargePointModel() string
	GetChargePointSerialNumber() string
	GetChargeBoxSerialNumber() string
	GetIccid() string
	GetImsi() string
	GetMeterType() string
	GetMeterSerialNumber() string
	GetFirmwareVersion() string
	GetOcppProtocol() string
	GetChargePointIdentifier() string
	GetDescription() string
	GetLocationLatitude() float64
	GetLocationLongitude() float64
	GetAddressId() int32
}

func (this *GetChargePointByIdentifierResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointByIdentifierResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointByIdentifierRespFromFace(this)
}

func (this *GetChargePointByIdentifierResp) GetId() int32 {
	return this.Id
}

func (this *GetChargePointByIdentifierResp) GetChargePointVendor() string {
	return this.ChargePointVendor
}

func (this *GetChargePointByIdentifierResp) GetChargePointModel() string {
	return this.ChargePointModel
}

func (this *GetChargePointByIdentifierResp) GetChargePointSerialNumber() string {
	return this.ChargePointSerialNumber
}

func (this *GetChargePointByIdentifierResp) GetChargeBoxSerialNumber() string {
	return this.ChargeBoxSerialNumber
}

func (this *GetChargePointByIdentifierResp) GetIccid() string {
	return this.Iccid
}

func (this *GetChargePointByIdentifierResp) GetImsi() string {
	return this.Imsi
}

func (this *GetChargePointByIdentifierResp) GetMeterType() string {
	return this.MeterType
}

func (this *GetChargePointByIdentifierResp) GetMeterSerialNumber() string {
	return this.MeterSerialNumber
}

func (this *GetChargePointByIdentifierResp) GetFirmwareVersion() string {
	return this.FirmwareVersion
}

func (this *GetChargePointByIdentifierResp) GetOcppProtocol() string {
	return this.OcppProtocol
}

func (this *GetChargePointByIdentifierResp) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func (this *GetChargePointByIdentifierResp) GetDescription() string {
	return this.Description
}

func (this *GetChargePointByIdentifierResp) GetLocationLatitude() float64 {
	return this.LocationLatitude
}

func (this *GetChargePointByIdentifierResp) GetLocationLongitude() float64 {
	return this.LocationLongitude
}

func (this *GetChargePointByIdentifierResp) GetAddressId() int32 {
	return this.AddressId
}

func NewGetChargePointByIdentifierRespFromFace(that GetChargePointByIdentifierRespFace) *GetChargePointByIdentifierResp {
	this := &GetChargePointByIdentifierResp{}
	this.Id = that.GetId()
	this.ChargePointVendor = that.GetChargePointVendor()
	this.ChargePointModel = that.GetChargePointModel()
	this.ChargePointSerialNumber = that.GetChargePointSerialNumber()
	this.ChargeBoxSerialNumber = that.GetChargeBoxSerialNumber()
	this.Iccid = that.GetIccid()
	this.Imsi = that.GetImsi()
	this.MeterType = that.GetMeterType()
	this.MeterSerialNumber = that.GetMeterSerialNumber()
	this.FirmwareVersion = that.GetFirmwareVersion()
	this.OcppProtocol = that.GetOcppProtocol()
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	this.Description = that.GetDescription()
	this.LocationLatitude = that.GetLocationLatitude()
	this.LocationLongitude = that.GetLocationLongitude()
	this.AddressId = that.GetAddressId()
	return this
}

func (m *GetChargePointByIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointByIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointByIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintChargePoints(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointByIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointByIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointByIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AddressId != 0 {
		i = encodeVarintChargePoints(dAtA, i, uint64(m.AddressId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.LocationLongitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LocationLongitude))))
		i--
		dAtA[i] = 0x79
	}
	if m.LocationLatitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LocationLatitude))))
		i--
		dAtA[i] = 0x71
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.OcppProtocol) > 0 {
		i -= len(m.OcppProtocol)
		copy(dAtA[i:], m.OcppProtocol)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.OcppProtocol)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.FirmwareVersion) > 0 {
		i -= len(m.FirmwareVersion)
		copy(dAtA[i:], m.FirmwareVersion)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.FirmwareVersion)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.MeterSerialNumber) > 0 {
		i -= len(m.MeterSerialNumber)
		copy(dAtA[i:], m.MeterSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.MeterSerialNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MeterType) > 0 {
		i -= len(m.MeterType)
		copy(dAtA[i:], m.MeterType)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.MeterType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Imsi) > 0 {
		i -= len(m.Imsi)
		copy(dAtA[i:], m.Imsi)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.Imsi)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Iccid) > 0 {
		i -= len(m.Iccid)
		copy(dAtA[i:], m.Iccid)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.Iccid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChargeBoxSerialNumber) > 0 {
		i -= len(m.ChargeBoxSerialNumber)
		copy(dAtA[i:], m.ChargeBoxSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargeBoxSerialNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChargePointSerialNumber) > 0 {
		i -= len(m.ChargePointSerialNumber)
		copy(dAtA[i:], m.ChargePointSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointSerialNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChargePointModel) > 0 {
		i -= len(m.ChargePointModel)
		copy(dAtA[i:], m.ChargePointModel)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointModel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChargePointVendor) > 0 {
		i -= len(m.ChargePointVendor)
		copy(dAtA[i:], m.ChargePointVendor)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointVendor)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintChargePoints(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointByIdentifierReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointByIdentifierReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointByIdentifierReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointByIdentifierResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointByIdentifierResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointByIdentifierResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AddressId != 0 {
		i = encodeVarintChargePoints(dAtA, i, uint64(m.AddressId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.LocationLongitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LocationLongitude))))
		i--
		dAtA[i] = 0x79
	}
	if m.LocationLatitude != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LocationLatitude))))
		i--
		dAtA[i] = 0x71
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.OcppProtocol) > 0 {
		i -= len(m.OcppProtocol)
		copy(dAtA[i:], m.OcppProtocol)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.OcppProtocol)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.FirmwareVersion) > 0 {
		i -= len(m.FirmwareVersion)
		copy(dAtA[i:], m.FirmwareVersion)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.FirmwareVersion)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.MeterSerialNumber) > 0 {
		i -= len(m.MeterSerialNumber)
		copy(dAtA[i:], m.MeterSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.MeterSerialNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MeterType) > 0 {
		i -= len(m.MeterType)
		copy(dAtA[i:], m.MeterType)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.MeterType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Imsi) > 0 {
		i -= len(m.Imsi)
		copy(dAtA[i:], m.Imsi)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.Imsi)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Iccid) > 0 {
		i -= len(m.Iccid)
		copy(dAtA[i:], m.Iccid)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.Iccid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChargeBoxSerialNumber) > 0 {
		i -= len(m.ChargeBoxSerialNumber)
		copy(dAtA[i:], m.ChargeBoxSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargeBoxSerialNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChargePointSerialNumber) > 0 {
		i -= len(m.ChargePointSerialNumber)
		copy(dAtA[i:], m.ChargePointSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointSerialNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChargePointModel) > 0 {
		i -= len(m.ChargePointModel)
		copy(dAtA[i:], m.ChargePointModel)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointModel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChargePointVendor) > 0 {
		i -= len(m.ChargePointVendor)
		copy(dAtA[i:], m.ChargePointVendor)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointVendor)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintChargePoints(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintChargePoints(dAtA []byte, offset int, v uint64) int {
	offset -= sovChargePoints(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetChargePointByIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChargePoints(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointByIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChargePoints(uint64(m.Id))
	}
	l = len(m.ChargePointVendor)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointModel)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargeBoxSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.Iccid)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.Imsi)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.MeterType)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.MeterSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.FirmwareVersion)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.OcppProtocol)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.LocationLatitude != 0 {
		n += 9
	}
	if m.LocationLongitude != 0 {
		n += 9
	}
	if m.AddressId != 0 {
		n += 2 + sovChargePoints(uint64(m.AddressId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointByIdentifierReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointByIdentifierResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChargePoints(uint64(m.Id))
	}
	l = len(m.ChargePointVendor)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointModel)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargeBoxSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.Iccid)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.Imsi)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.MeterType)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.MeterSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.FirmwareVersion)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.OcppProtocol)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.LocationLatitude != 0 {
		n += 9
	}
	if m.LocationLongitude != 0 {
		n += 9
	}
	if m.AddressId != 0 {
		n += 2 + sovChargePoints(uint64(m.AddressId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChargePoints(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChargePoints(x uint64) (n int) {
	return sovChargePoints(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetChargePointByIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointByIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointByIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointByIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointByIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointByIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointVendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointVendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargeBoxSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargeBoxSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iccid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iccid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imsi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imsi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeterType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeterSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OcppProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OcppProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationLatitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LocationLatitude = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationLongitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LocationLongitude = float64(math.Float64frombits(v))
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			m.AddressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointByIdentifierReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointByIdentifierReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointByIdentifierReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointByIdentifierResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointByIdentifierResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointByIdentifierResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointVendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointVendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargeBoxSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargeBoxSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iccid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iccid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imsi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imsi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeterType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeterSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OcppProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OcppProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationLatitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LocationLatitude = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationLongitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LocationLongitude = float64(math.Float64frombits(v))
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			m.AddressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChargePoints(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChargePoints
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChargePoints
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChargePoints
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChargePoints        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChargePoints          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChargePoints = fmt.Errorf("proto: unexpected end of group")
)
