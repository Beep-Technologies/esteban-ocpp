// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: charge_points.proto

package rpc

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChargePoint struct {
	Id                      int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ApplicationId           string   `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id"`
	EntityCode              string   `protobuf:"bytes,3,opt,name=entity_code,json=entityCode,proto3" json:"entity_code"`
	ChargePointIdentifier   string   `protobuf:"bytes,4,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier"`
	ChargePointVendor       string   `protobuf:"bytes,5,opt,name=charge_point_vendor,json=chargePointVendor,proto3" json:"charge_point_vendor"`
	ChargePointModel        string   `protobuf:"bytes,6,opt,name=charge_point_model,json=chargePointModel,proto3" json:"charge_point_model"`
	ChargePointSerialNumber string   `protobuf:"bytes,7,opt,name=charge_point_serial_number,json=chargePointSerialNumber,proto3" json:"charge_point_serial_number"`
	ChargeBoxSerialNumber   string   `protobuf:"bytes,8,opt,name=charge_box_serial_number,json=chargeBoxSerialNumber,proto3" json:"charge_box_serial_number"`
	Iccid                   string   `protobuf:"bytes,9,opt,name=iccid,proto3" json:"iccid"`
	Imsi                    string   `protobuf:"bytes,10,opt,name=imsi,proto3" json:"imsi"`
	MeterType               string   `protobuf:"bytes,11,opt,name=meter_type,json=meterType,proto3" json:"meter_type"`
	MeterSerialNumber       string   `protobuf:"bytes,12,opt,name=meter_serial_number,json=meterSerialNumber,proto3" json:"meter_serial_number"`
	FirmwareVersion         string   `protobuf:"bytes,13,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version"`
	ConnectorCount          int32    `protobuf:"varint,14,opt,name=connector_count,json=connectorCount,proto3" json:"connector_count"`
	OcppProtocol            string   `protobuf:"bytes,15,opt,name=ocpp_protocol,json=ocppProtocol,proto3" json:"ocpp_protocol"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *ChargePoint) Reset()         { *m = ChargePoint{} }
func (m *ChargePoint) String() string { return proto.CompactTextString(m) }
func (*ChargePoint) ProtoMessage()    {}
func (*ChargePoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{0}
}
func (m *ChargePoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChargePoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChargePoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChargePoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargePoint.Merge(m, src)
}
func (m *ChargePoint) XXX_Size() int {
	return m.Size()
}
func (m *ChargePoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargePoint.DiscardUnknown(m)
}

var xxx_messageInfo_ChargePoint proto.InternalMessageInfo

type ChargePointIdTag struct {
	Id                    int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ChargePointId         int32    `protobuf:"varint,2,opt,name=charge_point_id,json=chargePointId,proto3" json:"charge_point_id"`
	ChargePointIdentifier string   `protobuf:"bytes,3,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier"`
	IdTag                 string   `protobuf:"bytes,4,opt,name=id_tag,json=idTag,proto3" json:"id_tag"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ChargePointIdTag) Reset()         { *m = ChargePointIdTag{} }
func (m *ChargePointIdTag) String() string { return proto.CompactTextString(m) }
func (*ChargePointIdTag) ProtoMessage()    {}
func (*ChargePointIdTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{1}
}
func (m *ChargePointIdTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChargePointIdTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChargePointIdTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChargePointIdTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargePointIdTag.Merge(m, src)
}
func (m *ChargePointIdTag) XXX_Size() int {
	return m.Size()
}
func (m *ChargePointIdTag) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargePointIdTag.DiscardUnknown(m)
}

var xxx_messageInfo_ChargePointIdTag proto.InternalMessageInfo

// for exposed services
type CreateChargePointReq struct {
	ApplicationId         string   `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ChargePointIdentifier string   `protobuf:"bytes,2,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier,omitempty"`
	EntityCode            string   `protobuf:"bytes,3,opt,name=entity_code,json=entityCode,proto3" json:"entity_code,omitempty"`
	OcppProtocol          string   `protobuf:"bytes,4,opt,name=ocpp_protocol,json=ocppProtocol,proto3" json:"ocpp_protocol,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CreateChargePointReq) Reset()         { *m = CreateChargePointReq{} }
func (m *CreateChargePointReq) String() string { return proto.CompactTextString(m) }
func (*CreateChargePointReq) ProtoMessage()    {}
func (*CreateChargePointReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{2}
}
func (m *CreateChargePointReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChargePointReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateChargePointReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateChargePointReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChargePointReq.Merge(m, src)
}
func (m *CreateChargePointReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateChargePointReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChargePointReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChargePointReq proto.InternalMessageInfo

type CreateChargePointReqPublic struct {
	ChargePointIdentifier string   `protobuf:"bytes,1,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier,omitempty"`
	EntityCode            string   `protobuf:"bytes,2,opt,name=entity_code,json=entityCode,proto3" json:"entity_code,omitempty"`
	OcppProtocol          string   `protobuf:"bytes,3,opt,name=ocpp_protocol,json=ocppProtocol,proto3" json:"ocpp_protocol,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CreateChargePointReqPublic) Reset()         { *m = CreateChargePointReqPublic{} }
func (m *CreateChargePointReqPublic) String() string { return proto.CompactTextString(m) }
func (*CreateChargePointReqPublic) ProtoMessage()    {}
func (*CreateChargePointReqPublic) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{3}
}
func (m *CreateChargePointReqPublic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChargePointReqPublic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateChargePointReqPublic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateChargePointReqPublic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChargePointReqPublic.Merge(m, src)
}
func (m *CreateChargePointReqPublic) XXX_Size() int {
	return m.Size()
}
func (m *CreateChargePointReqPublic) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChargePointReqPublic.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChargePointReqPublic proto.InternalMessageInfo

type CreateChargePointResp struct {
	ChargePoint          *ChargePoint `protobuf:"bytes,1,opt,name=charge_point,json=chargePoint,proto3" json:"charge_point"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateChargePointResp) Reset()         { *m = CreateChargePointResp{} }
func (m *CreateChargePointResp) String() string { return proto.CompactTextString(m) }
func (*CreateChargePointResp) ProtoMessage()    {}
func (*CreateChargePointResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{4}
}
func (m *CreateChargePointResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChargePointResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateChargePointResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateChargePointResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChargePointResp.Merge(m, src)
}
func (m *CreateChargePointResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateChargePointResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChargePointResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChargePointResp proto.InternalMessageInfo

type GetChargePointsReq struct {
	ApplicationId        string   `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChargePointsReq) Reset()         { *m = GetChargePointsReq{} }
func (m *GetChargePointsReq) String() string { return proto.CompactTextString(m) }
func (*GetChargePointsReq) ProtoMessage()    {}
func (*GetChargePointsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{5}
}
func (m *GetChargePointsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointsReq.Merge(m, src)
}
func (m *GetChargePointsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointsReq proto.InternalMessageInfo

type GetChargePointsResp struct {
	ChargePoints         []*ChargePoint `protobuf:"bytes,1,rep,name=charge_points,json=chargePoints,proto3" json:"charge_points"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetChargePointsResp) Reset()         { *m = GetChargePointsResp{} }
func (m *GetChargePointsResp) String() string { return proto.CompactTextString(m) }
func (*GetChargePointsResp) ProtoMessage()    {}
func (*GetChargePointsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{6}
}
func (m *GetChargePointsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointsResp.Merge(m, src)
}
func (m *GetChargePointsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointsResp proto.InternalMessageInfo

type GetChargePointByIdentifierReq struct {
	ChargePointIdentifier string   `protobuf:"bytes,1,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier,omitempty"`
	ApplicationId         string   `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetChargePointByIdentifierReq) Reset()         { *m = GetChargePointByIdentifierReq{} }
func (m *GetChargePointByIdentifierReq) String() string { return proto.CompactTextString(m) }
func (*GetChargePointByIdentifierReq) ProtoMessage()    {}
func (*GetChargePointByIdentifierReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{7}
}
func (m *GetChargePointByIdentifierReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointByIdentifierReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointByIdentifierReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointByIdentifierReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointByIdentifierReq.Merge(m, src)
}
func (m *GetChargePointByIdentifierReq) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointByIdentifierReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointByIdentifierReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointByIdentifierReq proto.InternalMessageInfo

type GetChargePointByIdentifierResp struct {
	ChargePoint          *ChargePoint `protobuf:"bytes,1,opt,name=charge_point,json=chargePoint,proto3" json:"charge_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetChargePointByIdentifierResp) Reset()         { *m = GetChargePointByIdentifierResp{} }
func (m *GetChargePointByIdentifierResp) String() string { return proto.CompactTextString(m) }
func (*GetChargePointByIdentifierResp) ProtoMessage()    {}
func (*GetChargePointByIdentifierResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{8}
}
func (m *GetChargePointByIdentifierResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointByIdentifierResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointByIdentifierResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointByIdentifierResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointByIdentifierResp.Merge(m, src)
}
func (m *GetChargePointByIdentifierResp) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointByIdentifierResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointByIdentifierResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointByIdentifierResp proto.InternalMessageInfo

type UpdateChargePointDetailsReq struct {
	ChargePointId           int32    `protobuf:"varint,1,opt,name=charge_point_id,json=chargePointId,proto3" json:"id"`
	ChargePointVendor       string   `protobuf:"bytes,2,opt,name=charge_point_vendor,json=chargePointVendor,proto3" json:"charge_point_vendor"`
	ChargePointModel        string   `protobuf:"bytes,3,opt,name=charge_point_model,json=chargePointModel,proto3" json:"charge_point_model"`
	ChargePointSerialNumber string   `protobuf:"bytes,4,opt,name=charge_point_serial_number,json=chargePointSerialNumber,proto3" json:"charge_point_serial_number"`
	ChargeBoxSerialNumber   string   `protobuf:"bytes,5,opt,name=charge_box_serial_number,json=chargeBoxSerialNumber,proto3" json:"charge_box_serial_number"`
	Iccid                   string   `protobuf:"bytes,6,opt,name=iccid,proto3" json:"iccid"`
	Imsi                    string   `protobuf:"bytes,7,opt,name=imsi,proto3" json:"imsi"`
	MeterType               string   `protobuf:"bytes,8,opt,name=meter_type,json=meterType,proto3" json:"meter_type"`
	MeterSerialNumber       string   `protobuf:"bytes,9,opt,name=meter_serial_number,json=meterSerialNumber,proto3" json:"meter_serial_number"`
	FirmwareVersion         string   `protobuf:"bytes,10,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *UpdateChargePointDetailsReq) Reset()         { *m = UpdateChargePointDetailsReq{} }
func (m *UpdateChargePointDetailsReq) String() string { return proto.CompactTextString(m) }
func (*UpdateChargePointDetailsReq) ProtoMessage()    {}
func (*UpdateChargePointDetailsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{9}
}
func (m *UpdateChargePointDetailsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChargePointDetailsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChargePointDetailsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChargePointDetailsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChargePointDetailsReq.Merge(m, src)
}
func (m *UpdateChargePointDetailsReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChargePointDetailsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChargePointDetailsReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChargePointDetailsReq proto.InternalMessageInfo

type UpdateChargePointDetailsResp struct {
	ChargePoint          *ChargePoint `protobuf:"bytes,1,opt,name=charge_point,json=chargePoint,proto3" json:"charge_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateChargePointDetailsResp) Reset()         { *m = UpdateChargePointDetailsResp{} }
func (m *UpdateChargePointDetailsResp) String() string { return proto.CompactTextString(m) }
func (*UpdateChargePointDetailsResp) ProtoMessage()    {}
func (*UpdateChargePointDetailsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{10}
}
func (m *UpdateChargePointDetailsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChargePointDetailsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChargePointDetailsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChargePointDetailsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChargePointDetailsResp.Merge(m, src)
}
func (m *UpdateChargePointDetailsResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChargePointDetailsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChargePointDetailsResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChargePointDetailsResp proto.InternalMessageInfo

type CreateChargePointIdTagReq struct {
	ChargePointIdentifier string   `protobuf:"bytes,1,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier,omitempty"`
	ApplicationId         string   `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	IdTag                 string   `protobuf:"bytes,3,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CreateChargePointIdTagReq) Reset()         { *m = CreateChargePointIdTagReq{} }
func (m *CreateChargePointIdTagReq) String() string { return proto.CompactTextString(m) }
func (*CreateChargePointIdTagReq) ProtoMessage()    {}
func (*CreateChargePointIdTagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{11}
}
func (m *CreateChargePointIdTagReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChargePointIdTagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateChargePointIdTagReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateChargePointIdTagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChargePointIdTagReq.Merge(m, src)
}
func (m *CreateChargePointIdTagReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateChargePointIdTagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChargePointIdTagReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChargePointIdTagReq proto.InternalMessageInfo

type CreateChargePointIdTagReqPublic struct {
	ChargePointIdentifier string   `protobuf:"bytes,1,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier,omitempty"`
	IdTag                 string   `protobuf:"bytes,2,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CreateChargePointIdTagReqPublic) Reset()         { *m = CreateChargePointIdTagReqPublic{} }
func (m *CreateChargePointIdTagReqPublic) String() string { return proto.CompactTextString(m) }
func (*CreateChargePointIdTagReqPublic) ProtoMessage()    {}
func (*CreateChargePointIdTagReqPublic) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{12}
}
func (m *CreateChargePointIdTagReqPublic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChargePointIdTagReqPublic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateChargePointIdTagReqPublic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateChargePointIdTagReqPublic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChargePointIdTagReqPublic.Merge(m, src)
}
func (m *CreateChargePointIdTagReqPublic) XXX_Size() int {
	return m.Size()
}
func (m *CreateChargePointIdTagReqPublic) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChargePointIdTagReqPublic.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChargePointIdTagReqPublic proto.InternalMessageInfo

type CreateChargePointIdTagResp struct {
	ChargePointIdTag     *ChargePointIdTag `protobuf:"bytes,1,opt,name=charge_point_id_tag,json=chargePointIdTag,proto3" json:"charge_point_id_tag"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateChargePointIdTagResp) Reset()         { *m = CreateChargePointIdTagResp{} }
func (m *CreateChargePointIdTagResp) String() string { return proto.CompactTextString(m) }
func (*CreateChargePointIdTagResp) ProtoMessage()    {}
func (*CreateChargePointIdTagResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{13}
}
func (m *CreateChargePointIdTagResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChargePointIdTagResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateChargePointIdTagResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateChargePointIdTagResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChargePointIdTagResp.Merge(m, src)
}
func (m *CreateChargePointIdTagResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateChargePointIdTagResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChargePointIdTagResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChargePointIdTagResp proto.InternalMessageInfo

type GetChargePointIdTagsReq struct {
	ChargePointIdentifier string   `protobuf:"bytes,1,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier,omitempty"`
	ApplicationId         string   `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetChargePointIdTagsReq) Reset()         { *m = GetChargePointIdTagsReq{} }
func (m *GetChargePointIdTagsReq) String() string { return proto.CompactTextString(m) }
func (*GetChargePointIdTagsReq) ProtoMessage()    {}
func (*GetChargePointIdTagsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{14}
}
func (m *GetChargePointIdTagsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointIdTagsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointIdTagsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointIdTagsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointIdTagsReq.Merge(m, src)
}
func (m *GetChargePointIdTagsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointIdTagsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointIdTagsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointIdTagsReq proto.InternalMessageInfo

type GetChargePointIdTagsResp struct {
	ChargePointIdTags    []*ChargePointIdTag `protobuf:"bytes,1,rep,name=charge_point_id_tags,json=chargePointIdTags,proto3" json:"charge_point_id_tags"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetChargePointIdTagsResp) Reset()         { *m = GetChargePointIdTagsResp{} }
func (m *GetChargePointIdTagsResp) String() string { return proto.CompactTextString(m) }
func (*GetChargePointIdTagsResp) ProtoMessage()    {}
func (*GetChargePointIdTagsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{15}
}
func (m *GetChargePointIdTagsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointIdTagsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointIdTagsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointIdTagsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointIdTagsResp.Merge(m, src)
}
func (m *GetChargePointIdTagsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointIdTagsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointIdTagsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointIdTagsResp proto.InternalMessageInfo

type GetChargePointIdTagReq struct {
	ChargePointIdentifier string   `protobuf:"bytes,1,opt,name=charge_point_identifier,json=chargePointIdentifier,proto3" json:"charge_point_identifier,omitempty"`
	ApplicationId         string   `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	IdTag                 string   `protobuf:"bytes,3,opt,name=id_tag,json=idTag,proto3" json:"id_tag,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetChargePointIdTagReq) Reset()         { *m = GetChargePointIdTagReq{} }
func (m *GetChargePointIdTagReq) String() string { return proto.CompactTextString(m) }
func (*GetChargePointIdTagReq) ProtoMessage()    {}
func (*GetChargePointIdTagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{16}
}
func (m *GetChargePointIdTagReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointIdTagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointIdTagReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointIdTagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointIdTagReq.Merge(m, src)
}
func (m *GetChargePointIdTagReq) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointIdTagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointIdTagReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointIdTagReq proto.InternalMessageInfo

type GetChargePointIdTagResp struct {
	ChargePointIdTag     *ChargePointIdTag `protobuf:"bytes,1,opt,name=charge_point_id_tag,json=chargePointIdTag,proto3" json:"charge_point_id_tag"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetChargePointIdTagResp) Reset()         { *m = GetChargePointIdTagResp{} }
func (m *GetChargePointIdTagResp) String() string { return proto.CompactTextString(m) }
func (*GetChargePointIdTagResp) ProtoMessage()    {}
func (*GetChargePointIdTagResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{17}
}
func (m *GetChargePointIdTagResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointIdTagResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointIdTagResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointIdTagResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointIdTagResp.Merge(m, src)
}
func (m *GetChargePointIdTagResp) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointIdTagResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointIdTagResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointIdTagResp proto.InternalMessageInfo

// for internal services
type GetChargePointByIDReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationId        string   `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChargePointByIDReq) Reset()         { *m = GetChargePointByIDReq{} }
func (m *GetChargePointByIDReq) String() string { return proto.CompactTextString(m) }
func (*GetChargePointByIDReq) ProtoMessage()    {}
func (*GetChargePointByIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{18}
}
func (m *GetChargePointByIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointByIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointByIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointByIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointByIDReq.Merge(m, src)
}
func (m *GetChargePointByIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointByIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointByIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointByIDReq proto.InternalMessageInfo

type GetChargePointByIDResp struct {
	ChargePoint          *ChargePoint `protobuf:"bytes,1,opt,name=charge_point,json=chargePoint,proto3" json:"charge_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetChargePointByIDResp) Reset()         { *m = GetChargePointByIDResp{} }
func (m *GetChargePointByIDResp) String() string { return proto.CompactTextString(m) }
func (*GetChargePointByIDResp) ProtoMessage()    {}
func (*GetChargePointByIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f92b1fd075ed707, []int{19}
}
func (m *GetChargePointByIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChargePointByIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChargePointByIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChargePointByIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChargePointByIDResp.Merge(m, src)
}
func (m *GetChargePointByIDResp) XXX_Size() int {
	return m.Size()
}
func (m *GetChargePointByIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChargePointByIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetChargePointByIDResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ChargePoint)(nil), "ocpp.ChargePoint")
	proto.RegisterType((*ChargePointIdTag)(nil), "ocpp.ChargePointIdTag")
	proto.RegisterType((*CreateChargePointReq)(nil), "ocpp.CreateChargePointReq")
	proto.RegisterType((*CreateChargePointReqPublic)(nil), "ocpp.CreateChargePointReqPublic")
	proto.RegisterType((*CreateChargePointResp)(nil), "ocpp.CreateChargePointResp")
	proto.RegisterType((*GetChargePointsReq)(nil), "ocpp.GetChargePointsReq")
	proto.RegisterType((*GetChargePointsResp)(nil), "ocpp.GetChargePointsResp")
	proto.RegisterType((*GetChargePointByIdentifierReq)(nil), "ocpp.GetChargePointByIdentifierReq")
	proto.RegisterType((*GetChargePointByIdentifierResp)(nil), "ocpp.GetChargePointByIdentifierResp")
	proto.RegisterType((*UpdateChargePointDetailsReq)(nil), "ocpp.UpdateChargePointDetailsReq")
	proto.RegisterType((*UpdateChargePointDetailsResp)(nil), "ocpp.UpdateChargePointDetailsResp")
	proto.RegisterType((*CreateChargePointIdTagReq)(nil), "ocpp.CreateChargePointIdTagReq")
	proto.RegisterType((*CreateChargePointIdTagReqPublic)(nil), "ocpp.CreateChargePointIdTagReqPublic")
	proto.RegisterType((*CreateChargePointIdTagResp)(nil), "ocpp.CreateChargePointIdTagResp")
	proto.RegisterType((*GetChargePointIdTagsReq)(nil), "ocpp.GetChargePointIdTagsReq")
	proto.RegisterType((*GetChargePointIdTagsResp)(nil), "ocpp.GetChargePointIdTagsResp")
	proto.RegisterType((*GetChargePointIdTagReq)(nil), "ocpp.GetChargePointIdTagReq")
	proto.RegisterType((*GetChargePointIdTagResp)(nil), "ocpp.GetChargePointIdTagResp")
	proto.RegisterType((*GetChargePointByIDReq)(nil), "ocpp.GetChargePointByIDReq")
	proto.RegisterType((*GetChargePointByIDResp)(nil), "ocpp.GetChargePointByIDResp")
}

func init() { proto.RegisterFile("charge_points.proto", fileDescriptor_8f92b1fd075ed707) }

var fileDescriptor_8f92b1fd075ed707 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x67, 0xed, 0xd8, 0x89, 0x9f, 0xe3, 0x3f, 0x99, 0xfc, 0xdb, 0xa6, 0xc1, 0x13, 0x8c, 0x2a,
	0xf5, 0x52, 0x17, 0x01, 0xaa, 0x84, 0x8a, 0x84, 0x64, 0x47, 0x54, 0x39, 0x10, 0x45, 0xd3, 0x34,
	0x07, 0x90, 0x58, 0xd6, 0xbb, 0x13, 0x77, 0x24, 0xdb, 0xb3, 0xec, 0xae, 0x4b, 0x2c, 0x01, 0x67,
	0x4e, 0x48, 0xdc, 0x10, 0x5f, 0x85, 0x2f, 0xd0, 0x23, 0x9f, 0x60, 0xa1, 0x39, 0xa1, 0xfd, 0x14,
	0x68, 0xdf, 0x3a, 0xf1, 0xce, 0x7a, 0x9d, 0xa6, 0x26, 0x4d, 0x2f, 0x89, 0xe7, 0xfd, 0xfd, 0xcd,
	0x7b, 0xf3, 0xde, 0x6f, 0x61, 0xdd, 0x7a, 0x6e, 0xba, 0x3d, 0x6e, 0x38, 0x52, 0x0c, 0x7d, 0xaf,
	0xe5, 0xb8, 0xd2, 0x97, 0x64, 0x49, 0x5a, 0x8e, 0xb3, 0xf3, 0xa0, 0x27, 0xfc, 0xe7, 0xa3, 0x6e,
	0xcb, 0x92, 0x83, 0x87, 0x3d, 0xd9, 0x93, 0x0f, 0x51, 0xd9, 0x1d, 0x9d, 0xe2, 0x09, 0x0f, 0xf8,
	0x2b, 0x76, 0x6a, 0xfe, 0xbe, 0x0c, 0xe5, 0x0e, 0x06, 0x3b, 0x8a, 0x62, 0x91, 0x2d, 0xc8, 0x09,
	0x5b, 0xd7, 0xf6, 0xb4, 0xfb, 0x85, 0x76, 0x31, 0x0c, 0x68, 0x4e, 0xd8, 0x2c, 0x27, 0x6c, 0xf2,
	0x19, 0x54, 0x4d, 0xc7, 0xe9, 0x0b, 0xcb, 0xf4, 0x85, 0x1c, 0x1a, 0xc2, 0xd6, 0x73, 0x7b, 0xda,
	0xfd, 0x52, 0x9b, 0x84, 0x01, 0x4d, 0x69, 0x58, 0x25, 0x71, 0x3e, 0xb0, 0xc9, 0x47, 0x50, 0xe6,
	0x43, 0x5f, 0xf8, 0x63, 0xc3, 0x92, 0x36, 0xd7, 0xf3, 0xe8, 0x57, 0x0b, 0x03, 0x9a, 0x14, 0x33,
	0x88, 0x0f, 0x1d, 0x69, 0x73, 0xf2, 0x14, 0xb6, 0x93, 0x17, 0x34, 0x84, 0x1d, 0x29, 0x4f, 0x05,
	0x77, 0xf5, 0x25, 0xf4, 0xbe, 0x1b, 0x06, 0x74, 0x9e, 0x09, 0xdb, 0xb4, 0xa6, 0xf7, 0x39, 0xb8,
	0x14, 0x93, 0x27, 0x6a, 0xd5, 0x8c, 0x17, 0x7c, 0x68, 0x4b, 0x57, 0x2f, 0x60, 0xc0, 0xed, 0x30,
	0xa0, 0x59, 0x6a, 0xb6, 0x96, 0x08, 0x76, 0x82, 0x22, 0xb2, 0x0f, 0x44, 0xb1, 0x1c, 0x48, 0x9b,
	0xf7, 0xf5, 0x22, 0xc6, 0xd9, 0x0a, 0x03, 0x9a, 0xa1, 0x65, 0xf5, 0x44, 0x98, 0xaf, 0x22, 0x09,
	0xf9, 0x06, 0x76, 0x14, 0x3b, 0x8f, 0xbb, 0xc2, 0xec, 0x1b, 0xc3, 0xd1, 0xa0, 0xcb, 0x5d, 0x7d,
	0x19, 0xa3, 0x35, 0xc2, 0x80, 0x5e, 0x61, 0xc5, 0xb6, 0x13, 0x51, 0x9f, 0xa2, 0xe6, 0x10, 0x15,
	0xe4, 0x19, 0xe8, 0x13, 0xb7, 0xae, 0x3c, 0x4b, 0x85, 0x5e, 0xc1, 0xd0, 0xbb, 0x61, 0x40, 0xe7,
	0xda, 0x5c, 0x94, 0xb0, 0x2d, 0xcf, 0x94, 0xb0, 0x14, 0x0a, 0xc2, 0xb2, 0x84, 0xad, 0x97, 0x30,
	0x46, 0x29, 0x0c, 0x68, 0x2c, 0x60, 0xf1, 0x3f, 0xb2, 0x0b, 0x4b, 0x62, 0xe0, 0x09, 0x1d, 0x50,
	0xbf, 0x12, 0x06, 0x14, 0xcf, 0x0c, 0xff, 0x92, 0x07, 0x00, 0x03, 0xee, 0x73, 0xd7, 0xf0, 0xc7,
	0x0e, 0xd7, 0xcb, 0x68, 0x53, 0x0d, 0x03, 0x9a, 0x90, 0xb2, 0x12, 0xfe, 0x3e, 0x1e, 0x3b, 0x3c,
	0x6a, 0x58, 0xac, 0x50, 0xf1, 0xaf, 0x4e, 0x1b, 0x96, 0xa1, 0x66, 0x6b, 0x28, 0x54, 0x60, 0x7f,
	0x01, 0xf5, 0x53, 0xe1, 0x0e, 0x7e, 0x30, 0x5d, 0x6e, 0xbc, 0xe0, 0xae, 0x27, 0xe4, 0x50, 0xaf,
	0x60, 0x94, 0x8d, 0x30, 0xa0, 0x33, 0x3a, 0x56, 0xbb, 0x90, 0x9c, 0xc4, 0x02, 0xf2, 0x39, 0xd4,
	0x2c, 0x39, 0x1c, 0x72, 0xcb, 0x97, 0xae, 0x61, 0xc9, 0xd1, 0xd0, 0xd7, 0xab, 0x38, 0x21, 0xeb,
	0x61, 0x40, 0xd3, 0x2a, 0x56, 0xbd, 0x14, 0x74, 0xa2, 0x33, 0x79, 0x04, 0x95, 0x68, 0x32, 0x0d,
	0x1c, 0x38, 0x4b, 0xf6, 0xf5, 0x1a, 0xe6, 0x5e, 0x0b, 0x03, 0xaa, 0x2a, 0xd8, 0x6a, 0x74, 0x3c,
	0x9a, 0x9c, 0x9a, 0x7f, 0x6b, 0x50, 0xef, 0x24, 0x9f, 0xf2, 0xb1, 0xd9, 0x9b, 0x3b, 0x9f, 0x8f,
	0xa1, 0x96, 0x9a, 0x07, 0x1c, 0xd0, 0x0b, 0x88, 0xaa, 0x8a, 0x55, 0x94, 0x11, 0xb9, 0x6a, 0xde,
	0xf2, 0x0b, 0xcf, 0xdb, 0x07, 0x50, 0x14, 0xb6, 0xe1, 0x9b, 0xbd, 0xc9, 0xcc, 0x42, 0x18, 0xd0,
	0x89, 0x84, 0x15, 0x44, 0x74, 0x99, 0xe6, 0x9f, 0x1a, 0x6c, 0x74, 0x5c, 0x6e, 0xfa, 0x3c, 0x71,
	0x4f, 0xc6, 0xbf, 0x27, 0xf7, 0x66, 0xb6, 0x4d, 0x74, 0xe3, 0x52, 0x7a, 0xb3, 0x3c, 0x9a, 0x8f,
	0x1b, 0xb7, 0xd3, 0x3c, 0x68, 0x34, 0x63, 0x23, 0x29, 0x0b, 0xe8, 0xc3, 0x74, 0xcb, 0xf0, 0x0a,
	0xa9, 0xfe, 0xfc, 0xa1, 0xc1, 0x4e, 0x16, 0xfa, 0xa3, 0x51, 0xb7, 0x2f, 0xac, 0xab, 0xc0, 0x69,
	0x6f, 0x00, 0x2e, 0xf7, 0x7a, 0x70, 0xf9, 0x0c, 0x70, 0x06, 0x6c, 0x66, 0x60, 0xf3, 0x1c, 0xf2,
	0x25, 0xac, 0x26, 0x61, 0x21, 0x96, 0xf2, 0xc7, 0x6b, 0xad, 0xc8, 0xbb, 0x95, 0x30, 0x6e, 0xd7,
	0xc3, 0x80, 0x2a, 0xa6, 0xac, 0x9c, 0x00, 0xdc, 0x7c, 0x0c, 0xe4, 0x09, 0xf7, 0x13, 0x0e, 0xde,
	0xf5, 0x1b, 0xd7, 0xfc, 0x0e, 0xd6, 0x67, 0x9c, 0x3d, 0x87, 0x1c, 0x40, 0x45, 0x21, 0x36, 0x5d,
	0xdb, 0xcb, 0x67, 0x83, 0xc3, 0xe1, 0x51, 0x6c, 0xd9, 0x6a, 0x02, 0x9d, 0xd7, 0xfc, 0x19, 0xde,
	0x57, 0x33, 0xb4, 0xc7, 0xd3, 0x1a, 0x47, 0x48, 0x17, 0x6d, 0xcf, 0xbd, 0x6c, 0x22, 0x4c, 0xdf,
	0xf0, 0x04, 0x1a, 0x57, 0xe5, 0xf7, 0x1c, 0xf2, 0xe9, 0x35, 0x1b, 0xa1, 0x96, 0xfd, 0x97, 0x02,
	0xdc, 0x7d, 0xe6, 0xd8, 0x6a, 0x63, 0xf7, 0xb9, 0x6f, 0x8a, 0x3e, 0x36, 0xa0, 0x35, 0xbb, 0x07,
	0xd4, 0x65, 0x91, 0x1a, 0xfd, 0x39, 0xac, 0x98, 0xbb, 0x21, 0x56, 0xcc, 0xdf, 0x28, 0x2b, 0x2e,
	0xbd, 0x3d, 0x56, 0x2c, 0xdc, 0x00, 0x2b, 0x16, 0x5f, 0xc3, 0x8a, 0xcb, 0xd7, 0x60, 0xc5, 0x95,
	0x05, 0x59, 0xb1, 0x74, 0x23, 0xac, 0x08, 0x6f, 0xc0, 0x8a, 0xcd, 0x63, 0xd8, 0x9d, 0xff, 0x12,
	0x17, 0x7e, 0xe0, 0xbf, 0x69, 0x70, 0x67, 0x66, 0x73, 0x21, 0xf7, 0xbd, 0xfd, 0xa9, 0x25, 0x9b,
	0x97, 0x9c, 0x15, 0xef, 0xd4, 0x09, 0x4f, 0x39, 0x40, 0xe7, 0x42, 0xfa, 0x9f, 0xdb, 0x7e, 0x9a,
	0x31, 0x97, 0xcc, 0xf8, 0x63, 0x06, 0xb5, 0x4c, 0x32, 0x7a, 0x0e, 0xf9, 0x36, 0x35, 0xb4, 0x93,
	0x08, 0x71, 0x81, 0xb7, 0x66, 0x0a, 0x8c, 0x8e, 0x19, 0xc3, 0x3c, 0x21, 0xe3, 0xba, 0x95, 0x32,
	0x6d, 0x9e, 0xc1, 0xb6, 0xba, 0xbc, 0x50, 0xec, 0xdd, 0xc2, 0xda, 0xfc, 0x09, 0xf4, 0xec, 0xcc,
	0x9e, 0x43, 0x4c, 0xd8, 0xc8, 0x80, 0x7f, 0x41, 0x12, 0xf3, 0xae, 0xad, 0x87, 0x01, 0xcd, 0xf4,
	0x53, 0x96, 0x58, 0x9c, 0xa6, 0xf9, 0xab, 0x06, 0x5b, 0x19, 0xf9, 0xdf, 0xdd, 0xcb, 0x1b, 0x67,
	0x76, 0xe2, 0x56, 0x1e, 0xc1, 0x21, 0x6c, 0xce, 0x30, 0xd8, 0x7e, 0x54, 0x89, 0xea, 0xf4, 0x13,
	0x14, 0x3f, 0x3d, 0xaf, 0xd9, 0xda, 0xc3, 0x74, 0x69, 0xe3, 0x78, 0x8b, 0x2e, 0x8a, 0xf6, 0x9d,
	0x97, 0xaf, 0x1a, 0xef, 0xfd, 0xfb, 0xaa, 0xa1, 0xbd, 0x3c, 0x6f, 0x68, 0x7f, 0x9d, 0x37, 0xb4,
	0x7f, 0xce, 0x1b, 0xda, 0xd7, 0x79, 0xd7, 0xb1, 0xba, 0x45, 0xfc, 0x34, 0xfa, 0xe4, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x30, 0xb1, 0x71, 0xe3, 0x27, 0x0f, 0x00, 0x00,
}

type ChargePointFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetId() int32
	GetApplicationId() string
	GetEntityCode() string
	GetChargePointIdentifier() string
	GetChargePointVendor() string
	GetChargePointModel() string
	GetChargePointSerialNumber() string
	GetChargeBoxSerialNumber() string
	GetIccid() string
	GetImsi() string
	GetMeterType() string
	GetMeterSerialNumber() string
	GetFirmwareVersion() string
	GetConnectorCount() int32
	GetOcppProtocol() string
}

func (this *ChargePoint) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *ChargePoint) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewChargePointFromFace(this)
}

func (this *ChargePoint) GetId() int32 {
	return this.Id
}

func (this *ChargePoint) GetApplicationId() string {
	return this.ApplicationId
}

func (this *ChargePoint) GetEntityCode() string {
	return this.EntityCode
}

func (this *ChargePoint) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func (this *ChargePoint) GetChargePointVendor() string {
	return this.ChargePointVendor
}

func (this *ChargePoint) GetChargePointModel() string {
	return this.ChargePointModel
}

func (this *ChargePoint) GetChargePointSerialNumber() string {
	return this.ChargePointSerialNumber
}

func (this *ChargePoint) GetChargeBoxSerialNumber() string {
	return this.ChargeBoxSerialNumber
}

func (this *ChargePoint) GetIccid() string {
	return this.Iccid
}

func (this *ChargePoint) GetImsi() string {
	return this.Imsi
}

func (this *ChargePoint) GetMeterType() string {
	return this.MeterType
}

func (this *ChargePoint) GetMeterSerialNumber() string {
	return this.MeterSerialNumber
}

func (this *ChargePoint) GetFirmwareVersion() string {
	return this.FirmwareVersion
}

func (this *ChargePoint) GetConnectorCount() int32 {
	return this.ConnectorCount
}

func (this *ChargePoint) GetOcppProtocol() string {
	return this.OcppProtocol
}

func NewChargePointFromFace(that ChargePointFace) *ChargePoint {
	this := &ChargePoint{}
	this.Id = that.GetId()
	this.ApplicationId = that.GetApplicationId()
	this.EntityCode = that.GetEntityCode()
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	this.ChargePointVendor = that.GetChargePointVendor()
	this.ChargePointModel = that.GetChargePointModel()
	this.ChargePointSerialNumber = that.GetChargePointSerialNumber()
	this.ChargeBoxSerialNumber = that.GetChargeBoxSerialNumber()
	this.Iccid = that.GetIccid()
	this.Imsi = that.GetImsi()
	this.MeterType = that.GetMeterType()
	this.MeterSerialNumber = that.GetMeterSerialNumber()
	this.FirmwareVersion = that.GetFirmwareVersion()
	this.ConnectorCount = that.GetConnectorCount()
	this.OcppProtocol = that.GetOcppProtocol()
	return this
}

type ChargePointIdTagFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetId() int32
	GetChargePointId() int32
	GetChargePointIdentifier() string
	GetIdTag() string
}

func (this *ChargePointIdTag) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *ChargePointIdTag) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewChargePointIdTagFromFace(this)
}

func (this *ChargePointIdTag) GetId() int32 {
	return this.Id
}

func (this *ChargePointIdTag) GetChargePointId() int32 {
	return this.ChargePointId
}

func (this *ChargePointIdTag) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func (this *ChargePointIdTag) GetIdTag() string {
	return this.IdTag
}

func NewChargePointIdTagFromFace(that ChargePointIdTagFace) *ChargePointIdTag {
	this := &ChargePointIdTag{}
	this.Id = that.GetId()
	this.ChargePointId = that.GetChargePointId()
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	this.IdTag = that.GetIdTag()
	return this
}

type CreateChargePointReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetApplicationId() string
	GetChargePointIdentifier() string
	GetEntityCode() string
	GetOcppProtocol() string
}

func (this *CreateChargePointReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *CreateChargePointReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCreateChargePointReqFromFace(this)
}

func (this *CreateChargePointReq) GetApplicationId() string {
	return this.ApplicationId
}

func (this *CreateChargePointReq) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func (this *CreateChargePointReq) GetEntityCode() string {
	return this.EntityCode
}

func (this *CreateChargePointReq) GetOcppProtocol() string {
	return this.OcppProtocol
}

func NewCreateChargePointReqFromFace(that CreateChargePointReqFace) *CreateChargePointReq {
	this := &CreateChargePointReq{}
	this.ApplicationId = that.GetApplicationId()
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	this.EntityCode = that.GetEntityCode()
	this.OcppProtocol = that.GetOcppProtocol()
	return this
}

type CreateChargePointReqPublicFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePointIdentifier() string
	GetEntityCode() string
	GetOcppProtocol() string
}

func (this *CreateChargePointReqPublic) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *CreateChargePointReqPublic) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCreateChargePointReqPublicFromFace(this)
}

func (this *CreateChargePointReqPublic) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func (this *CreateChargePointReqPublic) GetEntityCode() string {
	return this.EntityCode
}

func (this *CreateChargePointReqPublic) GetOcppProtocol() string {
	return this.OcppProtocol
}

func NewCreateChargePointReqPublicFromFace(that CreateChargePointReqPublicFace) *CreateChargePointReqPublic {
	this := &CreateChargePointReqPublic{}
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	this.EntityCode = that.GetEntityCode()
	this.OcppProtocol = that.GetOcppProtocol()
	return this
}

type CreateChargePointRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePoint() *ChargePoint
}

func (this *CreateChargePointResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *CreateChargePointResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCreateChargePointRespFromFace(this)
}

func (this *CreateChargePointResp) GetChargePoint() *ChargePoint {
	return this.ChargePoint
}

func NewCreateChargePointRespFromFace(that CreateChargePointRespFace) *CreateChargePointResp {
	this := &CreateChargePointResp{}
	this.ChargePoint = that.GetChargePoint()
	return this
}

type GetChargePointsReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetApplicationId() string
}

func (this *GetChargePointsReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointsReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointsReqFromFace(this)
}

func (this *GetChargePointsReq) GetApplicationId() string {
	return this.ApplicationId
}

func NewGetChargePointsReqFromFace(that GetChargePointsReqFace) *GetChargePointsReq {
	this := &GetChargePointsReq{}
	this.ApplicationId = that.GetApplicationId()
	return this
}

type GetChargePointsRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePoints() []*ChargePoint
}

func (this *GetChargePointsResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointsResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointsRespFromFace(this)
}

func (this *GetChargePointsResp) GetChargePoints() []*ChargePoint {
	return this.ChargePoints
}

func NewGetChargePointsRespFromFace(that GetChargePointsRespFace) *GetChargePointsResp {
	this := &GetChargePointsResp{}
	this.ChargePoints = that.GetChargePoints()
	return this
}

type GetChargePointByIdentifierReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePointIdentifier() string
	GetApplicationId() string
}

func (this *GetChargePointByIdentifierReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointByIdentifierReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointByIdentifierReqFromFace(this)
}

func (this *GetChargePointByIdentifierReq) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func (this *GetChargePointByIdentifierReq) GetApplicationId() string {
	return this.ApplicationId
}

func NewGetChargePointByIdentifierReqFromFace(that GetChargePointByIdentifierReqFace) *GetChargePointByIdentifierReq {
	this := &GetChargePointByIdentifierReq{}
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	this.ApplicationId = that.GetApplicationId()
	return this
}

type GetChargePointByIdentifierRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePoint() *ChargePoint
}

func (this *GetChargePointByIdentifierResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointByIdentifierResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointByIdentifierRespFromFace(this)
}

func (this *GetChargePointByIdentifierResp) GetChargePoint() *ChargePoint {
	return this.ChargePoint
}

func NewGetChargePointByIdentifierRespFromFace(that GetChargePointByIdentifierRespFace) *GetChargePointByIdentifierResp {
	this := &GetChargePointByIdentifierResp{}
	this.ChargePoint = that.GetChargePoint()
	return this
}

type UpdateChargePointDetailsReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePointId() int32
	GetChargePointVendor() string
	GetChargePointModel() string
	GetChargePointSerialNumber() string
	GetChargeBoxSerialNumber() string
	GetIccid() string
	GetImsi() string
	GetMeterType() string
	GetMeterSerialNumber() string
	GetFirmwareVersion() string
}

func (this *UpdateChargePointDetailsReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *UpdateChargePointDetailsReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewUpdateChargePointDetailsReqFromFace(this)
}

func (this *UpdateChargePointDetailsReq) GetChargePointId() int32 {
	return this.ChargePointId
}

func (this *UpdateChargePointDetailsReq) GetChargePointVendor() string {
	return this.ChargePointVendor
}

func (this *UpdateChargePointDetailsReq) GetChargePointModel() string {
	return this.ChargePointModel
}

func (this *UpdateChargePointDetailsReq) GetChargePointSerialNumber() string {
	return this.ChargePointSerialNumber
}

func (this *UpdateChargePointDetailsReq) GetChargeBoxSerialNumber() string {
	return this.ChargeBoxSerialNumber
}

func (this *UpdateChargePointDetailsReq) GetIccid() string {
	return this.Iccid
}

func (this *UpdateChargePointDetailsReq) GetImsi() string {
	return this.Imsi
}

func (this *UpdateChargePointDetailsReq) GetMeterType() string {
	return this.MeterType
}

func (this *UpdateChargePointDetailsReq) GetMeterSerialNumber() string {
	return this.MeterSerialNumber
}

func (this *UpdateChargePointDetailsReq) GetFirmwareVersion() string {
	return this.FirmwareVersion
}

func NewUpdateChargePointDetailsReqFromFace(that UpdateChargePointDetailsReqFace) *UpdateChargePointDetailsReq {
	this := &UpdateChargePointDetailsReq{}
	this.ChargePointId = that.GetChargePointId()
	this.ChargePointVendor = that.GetChargePointVendor()
	this.ChargePointModel = that.GetChargePointModel()
	this.ChargePointSerialNumber = that.GetChargePointSerialNumber()
	this.ChargeBoxSerialNumber = that.GetChargeBoxSerialNumber()
	this.Iccid = that.GetIccid()
	this.Imsi = that.GetImsi()
	this.MeterType = that.GetMeterType()
	this.MeterSerialNumber = that.GetMeterSerialNumber()
	this.FirmwareVersion = that.GetFirmwareVersion()
	return this
}

type UpdateChargePointDetailsRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePoint() *ChargePoint
}

func (this *UpdateChargePointDetailsResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *UpdateChargePointDetailsResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewUpdateChargePointDetailsRespFromFace(this)
}

func (this *UpdateChargePointDetailsResp) GetChargePoint() *ChargePoint {
	return this.ChargePoint
}

func NewUpdateChargePointDetailsRespFromFace(that UpdateChargePointDetailsRespFace) *UpdateChargePointDetailsResp {
	this := &UpdateChargePointDetailsResp{}
	this.ChargePoint = that.GetChargePoint()
	return this
}

type CreateChargePointIdTagReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePointIdentifier() string
	GetApplicationId() string
	GetIdTag() string
}

func (this *CreateChargePointIdTagReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *CreateChargePointIdTagReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCreateChargePointIdTagReqFromFace(this)
}

func (this *CreateChargePointIdTagReq) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func (this *CreateChargePointIdTagReq) GetApplicationId() string {
	return this.ApplicationId
}

func (this *CreateChargePointIdTagReq) GetIdTag() string {
	return this.IdTag
}

func NewCreateChargePointIdTagReqFromFace(that CreateChargePointIdTagReqFace) *CreateChargePointIdTagReq {
	this := &CreateChargePointIdTagReq{}
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	this.ApplicationId = that.GetApplicationId()
	this.IdTag = that.GetIdTag()
	return this
}

type CreateChargePointIdTagReqPublicFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePointIdentifier() string
	GetIdTag() string
}

func (this *CreateChargePointIdTagReqPublic) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *CreateChargePointIdTagReqPublic) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCreateChargePointIdTagReqPublicFromFace(this)
}

func (this *CreateChargePointIdTagReqPublic) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func (this *CreateChargePointIdTagReqPublic) GetIdTag() string {
	return this.IdTag
}

func NewCreateChargePointIdTagReqPublicFromFace(that CreateChargePointIdTagReqPublicFace) *CreateChargePointIdTagReqPublic {
	this := &CreateChargePointIdTagReqPublic{}
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	this.IdTag = that.GetIdTag()
	return this
}

type CreateChargePointIdTagRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePointIdTag() *ChargePointIdTag
}

func (this *CreateChargePointIdTagResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *CreateChargePointIdTagResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCreateChargePointIdTagRespFromFace(this)
}

func (this *CreateChargePointIdTagResp) GetChargePointIdTag() *ChargePointIdTag {
	return this.ChargePointIdTag
}

func NewCreateChargePointIdTagRespFromFace(that CreateChargePointIdTagRespFace) *CreateChargePointIdTagResp {
	this := &CreateChargePointIdTagResp{}
	this.ChargePointIdTag = that.GetChargePointIdTag()
	return this
}

type GetChargePointIdTagsReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePointIdentifier() string
	GetApplicationId() string
}

func (this *GetChargePointIdTagsReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointIdTagsReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointIdTagsReqFromFace(this)
}

func (this *GetChargePointIdTagsReq) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func (this *GetChargePointIdTagsReq) GetApplicationId() string {
	return this.ApplicationId
}

func NewGetChargePointIdTagsReqFromFace(that GetChargePointIdTagsReqFace) *GetChargePointIdTagsReq {
	this := &GetChargePointIdTagsReq{}
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	this.ApplicationId = that.GetApplicationId()
	return this
}

type GetChargePointIdTagsRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePointIdTags() []*ChargePointIdTag
}

func (this *GetChargePointIdTagsResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointIdTagsResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointIdTagsRespFromFace(this)
}

func (this *GetChargePointIdTagsResp) GetChargePointIdTags() []*ChargePointIdTag {
	return this.ChargePointIdTags
}

func NewGetChargePointIdTagsRespFromFace(that GetChargePointIdTagsRespFace) *GetChargePointIdTagsResp {
	this := &GetChargePointIdTagsResp{}
	this.ChargePointIdTags = that.GetChargePointIdTags()
	return this
}

type GetChargePointIdTagReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePointIdentifier() string
	GetApplicationId() string
	GetIdTag() string
}

func (this *GetChargePointIdTagReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointIdTagReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointIdTagReqFromFace(this)
}

func (this *GetChargePointIdTagReq) GetChargePointIdentifier() string {
	return this.ChargePointIdentifier
}

func (this *GetChargePointIdTagReq) GetApplicationId() string {
	return this.ApplicationId
}

func (this *GetChargePointIdTagReq) GetIdTag() string {
	return this.IdTag
}

func NewGetChargePointIdTagReqFromFace(that GetChargePointIdTagReqFace) *GetChargePointIdTagReq {
	this := &GetChargePointIdTagReq{}
	this.ChargePointIdentifier = that.GetChargePointIdentifier()
	this.ApplicationId = that.GetApplicationId()
	this.IdTag = that.GetIdTag()
	return this
}

type GetChargePointIdTagRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePointIdTag() *ChargePointIdTag
}

func (this *GetChargePointIdTagResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointIdTagResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointIdTagRespFromFace(this)
}

func (this *GetChargePointIdTagResp) GetChargePointIdTag() *ChargePointIdTag {
	return this.ChargePointIdTag
}

func NewGetChargePointIdTagRespFromFace(that GetChargePointIdTagRespFace) *GetChargePointIdTagResp {
	this := &GetChargePointIdTagResp{}
	this.ChargePointIdTag = that.GetChargePointIdTag()
	return this
}

type GetChargePointByIDReqFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetId() int32
	GetApplicationId() string
}

func (this *GetChargePointByIDReq) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointByIDReq) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointByIDReqFromFace(this)
}

func (this *GetChargePointByIDReq) GetId() int32 {
	return this.Id
}

func (this *GetChargePointByIDReq) GetApplicationId() string {
	return this.ApplicationId
}

func NewGetChargePointByIDReqFromFace(that GetChargePointByIDReqFace) *GetChargePointByIDReq {
	this := &GetChargePointByIDReq{}
	this.Id = that.GetId()
	this.ApplicationId = that.GetApplicationId()
	return this
}

type GetChargePointByIDRespFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetChargePoint() *ChargePoint
}

func (this *GetChargePointByIDResp) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *GetChargePointByIDResp) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGetChargePointByIDRespFromFace(this)
}

func (this *GetChargePointByIDResp) GetChargePoint() *ChargePoint {
	return this.ChargePoint
}

func NewGetChargePointByIDRespFromFace(that GetChargePointByIDRespFace) *GetChargePointByIDResp {
	this := &GetChargePointByIDResp{}
	this.ChargePoint = that.GetChargePoint()
	return this
}

func (m *ChargePoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChargePoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChargePoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OcppProtocol) > 0 {
		i -= len(m.OcppProtocol)
		copy(dAtA[i:], m.OcppProtocol)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.OcppProtocol)))
		i--
		dAtA[i] = 0x7a
	}
	if m.ConnectorCount != 0 {
		i = encodeVarintChargePoints(dAtA, i, uint64(m.ConnectorCount))
		i--
		dAtA[i] = 0x70
	}
	if len(m.FirmwareVersion) > 0 {
		i -= len(m.FirmwareVersion)
		copy(dAtA[i:], m.FirmwareVersion)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.FirmwareVersion)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.MeterSerialNumber) > 0 {
		i -= len(m.MeterSerialNumber)
		copy(dAtA[i:], m.MeterSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.MeterSerialNumber)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MeterType) > 0 {
		i -= len(m.MeterType)
		copy(dAtA[i:], m.MeterType)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.MeterType)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Imsi) > 0 {
		i -= len(m.Imsi)
		copy(dAtA[i:], m.Imsi)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.Imsi)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Iccid) > 0 {
		i -= len(m.Iccid)
		copy(dAtA[i:], m.Iccid)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.Iccid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChargeBoxSerialNumber) > 0 {
		i -= len(m.ChargeBoxSerialNumber)
		copy(dAtA[i:], m.ChargeBoxSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargeBoxSerialNumber)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ChargePointSerialNumber) > 0 {
		i -= len(m.ChargePointSerialNumber)
		copy(dAtA[i:], m.ChargePointSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointSerialNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChargePointModel) > 0 {
		i -= len(m.ChargePointModel)
		copy(dAtA[i:], m.ChargePointModel)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointModel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChargePointVendor) > 0 {
		i -= len(m.ChargePointVendor)
		copy(dAtA[i:], m.ChargePointVendor)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointVendor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EntityCode) > 0 {
		i -= len(m.EntityCode)
		copy(dAtA[i:], m.EntityCode)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.EntityCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApplicationId) > 0 {
		i -= len(m.ApplicationId)
		copy(dAtA[i:], m.ApplicationId)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ApplicationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintChargePoints(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChargePointIdTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChargePointIdTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChargePointIdTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdTag) > 0 {
		i -= len(m.IdTag)
		copy(dAtA[i:], m.IdTag)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.IdTag)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChargePointId != 0 {
		i = encodeVarintChargePoints(dAtA, i, uint64(m.ChargePointId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintChargePoints(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateChargePointReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChargePointReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateChargePointReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OcppProtocol) > 0 {
		i -= len(m.OcppProtocol)
		copy(dAtA[i:], m.OcppProtocol)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.OcppProtocol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EntityCode) > 0 {
		i -= len(m.EntityCode)
		copy(dAtA[i:], m.EntityCode)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.EntityCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApplicationId) > 0 {
		i -= len(m.ApplicationId)
		copy(dAtA[i:], m.ApplicationId)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ApplicationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateChargePointReqPublic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChargePointReqPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateChargePointReqPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OcppProtocol) > 0 {
		i -= len(m.OcppProtocol)
		copy(dAtA[i:], m.OcppProtocol)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.OcppProtocol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EntityCode) > 0 {
		i -= len(m.EntityCode)
		copy(dAtA[i:], m.EntityCode)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.EntityCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateChargePointResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChargePointResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateChargePointResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChargePoint != nil {
		{
			size, err := m.ChargePoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChargePoints(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApplicationId) > 0 {
		i -= len(m.ApplicationId)
		copy(dAtA[i:], m.ApplicationId)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ApplicationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChargePoints) > 0 {
		for iNdEx := len(m.ChargePoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChargePoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChargePoints(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointByIdentifierReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointByIdentifierReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointByIdentifierReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApplicationId) > 0 {
		i -= len(m.ApplicationId)
		copy(dAtA[i:], m.ApplicationId)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ApplicationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointByIdentifierResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointByIdentifierResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointByIdentifierResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChargePoint != nil {
		{
			size, err := m.ChargePoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChargePoints(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateChargePointDetailsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChargePointDetailsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateChargePointDetailsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FirmwareVersion) > 0 {
		i -= len(m.FirmwareVersion)
		copy(dAtA[i:], m.FirmwareVersion)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.FirmwareVersion)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.MeterSerialNumber) > 0 {
		i -= len(m.MeterSerialNumber)
		copy(dAtA[i:], m.MeterSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.MeterSerialNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MeterType) > 0 {
		i -= len(m.MeterType)
		copy(dAtA[i:], m.MeterType)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.MeterType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Imsi) > 0 {
		i -= len(m.Imsi)
		copy(dAtA[i:], m.Imsi)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.Imsi)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Iccid) > 0 {
		i -= len(m.Iccid)
		copy(dAtA[i:], m.Iccid)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.Iccid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChargeBoxSerialNumber) > 0 {
		i -= len(m.ChargeBoxSerialNumber)
		copy(dAtA[i:], m.ChargeBoxSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargeBoxSerialNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChargePointSerialNumber) > 0 {
		i -= len(m.ChargePointSerialNumber)
		copy(dAtA[i:], m.ChargePointSerialNumber)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointSerialNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChargePointModel) > 0 {
		i -= len(m.ChargePointModel)
		copy(dAtA[i:], m.ChargePointModel)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointModel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChargePointVendor) > 0 {
		i -= len(m.ChargePointVendor)
		copy(dAtA[i:], m.ChargePointVendor)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointVendor)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChargePointId != 0 {
		i = encodeVarintChargePoints(dAtA, i, uint64(m.ChargePointId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateChargePointDetailsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChargePointDetailsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateChargePointDetailsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChargePoint != nil {
		{
			size, err := m.ChargePoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChargePoints(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateChargePointIdTagReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChargePointIdTagReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateChargePointIdTagReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdTag) > 0 {
		i -= len(m.IdTag)
		copy(dAtA[i:], m.IdTag)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.IdTag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApplicationId) > 0 {
		i -= len(m.ApplicationId)
		copy(dAtA[i:], m.ApplicationId)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ApplicationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateChargePointIdTagReqPublic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChargePointIdTagReqPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateChargePointIdTagReqPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdTag) > 0 {
		i -= len(m.IdTag)
		copy(dAtA[i:], m.IdTag)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.IdTag)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateChargePointIdTagResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChargePointIdTagResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateChargePointIdTagResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChargePointIdTag != nil {
		{
			size, err := m.ChargePointIdTag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChargePoints(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointIdTagsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointIdTagsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointIdTagsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApplicationId) > 0 {
		i -= len(m.ApplicationId)
		copy(dAtA[i:], m.ApplicationId)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ApplicationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointIdTagsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointIdTagsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointIdTagsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChargePointIdTags) > 0 {
		for iNdEx := len(m.ChargePointIdTags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChargePointIdTags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChargePoints(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointIdTagReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointIdTagReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointIdTagReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdTag) > 0 {
		i -= len(m.IdTag)
		copy(dAtA[i:], m.IdTag)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.IdTag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApplicationId) > 0 {
		i -= len(m.ApplicationId)
		copy(dAtA[i:], m.ApplicationId)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ApplicationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChargePointIdentifier) > 0 {
		i -= len(m.ChargePointIdentifier)
		copy(dAtA[i:], m.ChargePointIdentifier)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ChargePointIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointIdTagResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointIdTagResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointIdTagResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChargePointIdTag != nil {
		{
			size, err := m.ChargePointIdTag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChargePoints(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointByIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointByIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointByIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApplicationId) > 0 {
		i -= len(m.ApplicationId)
		copy(dAtA[i:], m.ApplicationId)
		i = encodeVarintChargePoints(dAtA, i, uint64(len(m.ApplicationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintChargePoints(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetChargePointByIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChargePointByIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChargePointByIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChargePoint != nil {
		{
			size, err := m.ChargePoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChargePoints(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChargePoints(dAtA []byte, offset int, v uint64) int {
	offset -= sovChargePoints(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChargePoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChargePoints(uint64(m.Id))
	}
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.EntityCode)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointVendor)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointModel)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargeBoxSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.Iccid)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.Imsi)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.MeterType)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.MeterSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.FirmwareVersion)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.ConnectorCount != 0 {
		n += 1 + sovChargePoints(uint64(m.ConnectorCount))
	}
	l = len(m.OcppProtocol)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChargePointIdTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChargePoints(uint64(m.Id))
	}
	if m.ChargePointId != 0 {
		n += 1 + sovChargePoints(uint64(m.ChargePointId))
	}
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.IdTag)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateChargePointReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.EntityCode)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.OcppProtocol)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateChargePointReqPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.EntityCode)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.OcppProtocol)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateChargePointResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChargePoint != nil {
		l = m.ChargePoint.Size()
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChargePoints) > 0 {
		for _, e := range m.ChargePoints {
			l = e.Size()
			n += 1 + l + sovChargePoints(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointByIdentifierReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointByIdentifierResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChargePoint != nil {
		l = m.ChargePoint.Size()
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateChargePointDetailsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChargePointId != 0 {
		n += 1 + sovChargePoints(uint64(m.ChargePointId))
	}
	l = len(m.ChargePointVendor)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointModel)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargePointSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ChargeBoxSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.Iccid)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.Imsi)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.MeterType)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.MeterSerialNumber)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.FirmwareVersion)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateChargePointDetailsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChargePoint != nil {
		l = m.ChargePoint.Size()
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateChargePointIdTagReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.IdTag)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateChargePointIdTagReqPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.IdTag)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateChargePointIdTagResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChargePointIdTag != nil {
		l = m.ChargePointIdTag.Size()
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointIdTagsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointIdTagsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChargePointIdTags) > 0 {
		for _, e := range m.ChargePointIdTags {
			l = e.Size()
			n += 1 + l + sovChargePoints(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointIdTagReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChargePointIdentifier)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	l = len(m.IdTag)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointIdTagResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChargePointIdTag != nil {
		l = m.ChargePointIdTag.Size()
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointByIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChargePoints(uint64(m.Id))
	}
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetChargePointByIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChargePoint != nil {
		l = m.ChargePoint.Size()
		n += 1 + l + sovChargePoints(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChargePoints(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChargePoints(x uint64) (n int) {
	return sovChargePoints(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChargePoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChargePoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChargePoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointVendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointVendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargeBoxSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargeBoxSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iccid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iccid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imsi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imsi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeterType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeterSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectorCount", wireType)
			}
			m.ConnectorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectorCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OcppProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OcppProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChargePointIdTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChargePointIdTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChargePointIdTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointId", wireType)
			}
			m.ChargePointId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChargePointId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChargePointReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChargePointReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChargePointReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OcppProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OcppProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChargePointReqPublic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChargePointReqPublic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChargePointReqPublic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OcppProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OcppProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChargePointResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChargePointResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChargePointResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChargePoint == nil {
				m.ChargePoint = &ChargePoint{}
			}
			if err := m.ChargePoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePoints = append(m.ChargePoints, &ChargePoint{})
			if err := m.ChargePoints[len(m.ChargePoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointByIdentifierReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointByIdentifierReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointByIdentifierReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointByIdentifierResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointByIdentifierResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointByIdentifierResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChargePoint == nil {
				m.ChargePoint = &ChargePoint{}
			}
			if err := m.ChargePoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChargePointDetailsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChargePointDetailsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChargePointDetailsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointId", wireType)
			}
			m.ChargePointId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChargePointId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointVendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointVendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargeBoxSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargeBoxSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iccid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iccid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imsi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imsi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeterType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterSerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeterSerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChargePointDetailsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChargePointDetailsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChargePointDetailsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChargePoint == nil {
				m.ChargePoint = &ChargePoint{}
			}
			if err := m.ChargePoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChargePointIdTagReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChargePointIdTagReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChargePointIdTagReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChargePointIdTagReqPublic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChargePointIdTagReqPublic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChargePointIdTagReqPublic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChargePointIdTagResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChargePointIdTagResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChargePointIdTagResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChargePointIdTag == nil {
				m.ChargePointIdTag = &ChargePointIdTag{}
			}
			if err := m.ChargePointIdTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointIdTagsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointIdTagsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointIdTagsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointIdTagsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointIdTagsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointIdTagsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdTags = append(m.ChargePointIdTags, &ChargePointIdTag{})
			if err := m.ChargePointIdTags[len(m.ChargePointIdTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointIdTagReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointIdTagReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointIdTagReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargePointIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointIdTagResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointIdTagResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointIdTagResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePointIdTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChargePointIdTag == nil {
				m.ChargePointIdTag = &ChargePointIdTag{}
			}
			if err := m.ChargePointIdTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointByIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointByIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointByIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChargePointByIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChargePointByIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChargePointByIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargePoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChargePoints
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChargePoints
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChargePoint == nil {
				m.ChargePoint = &ChargePoint{}
			}
			if err := m.ChargePoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChargePoints(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChargePoints
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChargePoints(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChargePoints
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChargePoints
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChargePoints
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChargePoints
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChargePoints
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChargePoints        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChargePoints          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChargePoints = fmt.Errorf("proto: unexpected end of group")
)
